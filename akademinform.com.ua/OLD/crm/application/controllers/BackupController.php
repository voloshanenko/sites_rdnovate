<?php
/*
 * Создан: 08.11.2007 10:27:58
 * Автор: Александр Перов
 */

require_once 'Zend_Controller_ActionWithInit.php';
require_once 'Zend/Validate/Digits.php';
require_once 'Zend/Validate/NotEmpty.php';
require_once 'Zend/Validate/EmailAddress.php';

class BackupController extends Zend_Controller_ActionWithInit {

    public function preDispatch() {
        parent::preDispatch();
        if ($this->session->is_super_user == "") $this->_redirect("/index");
        global $is_demo, $is_saas;
        $this->view->is_demo = $is_demo;
		$this->view->is_saas = $is_saas;
        $this->view->doNotShowPDAlink = true;
        $this->trackPages();
    }

    public function indexAction() {
        $this->template = "backup/index";
        eval(base64_decode(''));
        if (!is_numeric($id) || $id=="") {
            $temp = $this->db->fetchRow("SELECT id FROM dacons_users WHERE customer_id='".$this->session->customer_id."' LIMIT 1");
            $id = $temp["id"];
        }
        
    }

    public function sqlbackupAction() {
		if ((isset($is_saas)) && ($is_saas==true)){
			$this->_redirect("/index");
		} else {
			$this->template = "backup/sqlbackup";
		}
    }

    public function sqlrestoreAction() {
		if ((isset($is_saas)) && ($is_saas==true)){
			$this->_redirect("/index");
		} else {
			$this->template = "backup/sqlrestore";
		}
    }

    public function csvbackupAction() {
        global $conf;
        $path = str_replace ('http://'.$_SERVER['HTTP_HOST'], $_SERVER ['DOCUMENT_ROOT'], $conf['siteurl']).'/exportdata/';
        $this->view->csvfiles = $this->file_select($path);
        $this->template = "backup/exportcsv";
    }

    public function exportcsvgoAction() {
        if ($this->getRequest()->getParam("go")) {
            $createDate = time();
            require_once "functions.php";
            $filename = "exportdata/CONS_".date("Y-m-d_H-i",$createDate).".csv";
            $fp = fopen($filename,"w");
            $contents = getCSV ($this->db, $this->session);
            $contents = str_replace(";", "\t", $contents);
            $contents = iconv("UTF-8", "UTF-16LE", $contents);
            $contents = chr(hexdec('FF')) . chr(hexdec('FE')) . $contents;
            fwrite ($fp, $contents);
            fclose ($fp);
            $this->view->filename = $filename;
            $this->template = "backup/exportSuccess";
        } else {
            $this->csvbackupAction();
        }
    }

    function file_select($PATH) {
        $files = array();
        if (is_dir($PATH) && $handle = opendir($PATH)) {
            while (false !== ($file = readdir($handle))) {
                if (preg_match("/^.+?\.csv?$/", $file)) {
                    $files[$file] = '/exportdata/'.$file;
                }
            }
            closedir($handle);
        }
        krsort($files);
        return $files;
    }

    public function importexcelAction() {
        $this->view->managers = $this->db->fetchAll("SELECT id, nickname FROM dacons_users WHERE customer_id = '".$this->session->customer_id."' AND readonly<>1 AND is_admin = 0 ORDER BY `id`");
        $this->template = "backup/excelImport";
    }

    public function importexcelgoAction() {
		global $conf;
        error_reporting(E_ALL &~E_NOTICE);
        $header_count = 2;
        if ($this->getRequest()->getParam("go")) {
            $this->template = "backup/excelImportGo";
            if (isset($_FILES['uploadfile']) && ($_FILES['uploadfile']['size']) && ($_FILES["uploadfile"]["type"] == "application/vnd.ms-excel")) {
                $this->session->excel_file=$_SERVER['DOCUMENT_ROOT'].$conf[dir]."/importdata/".basename($_FILES['uploadfile']['name']);
                $this->session->err = 0;
                $this->session->count_start = $header_count;
                $this->session->man_id = $_REQUEST['manager'];
				$this->session->added=0;
				$this->session->errorlog = '';
                copy($_FILES['uploadfile']['tmp_name'], $this->session->excel_file);
            } else if (!isset($this->session->excel_file)) {
                $this->importexcelAction();                
                return;
            }        

			require_once($_SERVER['DOCUMENT_ROOT'].$conf[dir].'/libs/excel_reader2.php');
			$xls = new Spreadsheet_Excel_Reader($this->session->excel_file, false);

			$total = $xls->rowcount();
			
			if ($this->session->man_id){        
	            $count_start = $header_count;
	            if (isset($this->session->count_start)) {$count_start = $this->session->count_start;}
	            $count_end = $count_start + 50;
	            if ($count_end > $total) {$count_end = $total;}

	            include ('incl/messages.php');
	            $count = $count_start + 1;			
	            for ($row = $count; $row <= $count_end; $row++) {
	                $valid = true;

	                $phone = array();
	                if ($xls->val($row, 'C')) array_push($phone, $xls->val($row, 'C'));
	                if ($xls->val($row, 'D')) array_push($phone, $xls->val($row, 'D'));
	                if ($xls->val($row, 'E')) array_push($phone, $xls->val($row, 'E'));
	                if ($xls->val($row, 'B')) array_push($phone, 'факс:'.$xls->val($row, 'B'));
	                
	                $address = array();
	                if ($xls->val($row, 'H')) array_push($address, $xls->val($row, 'H'));
	                if ($xls->val($row, 'I')) array_push($address, $xls->val($row, 'I'));
	                if ($xls->val($row, 'J')) array_push($address, $xls->val($row, 'J'));
	                if ($xls->val($row, 'K')) array_push($address, $xls->val($row, 'K'));

	                $name = $xls->val($row, 'A');
	                $phone = implode(", ", $phone);
	                $email = $xls->val($row, 'F');
	                $site = $xls->val($row, 'G');
	                $address = implode(", ", $address);
	                $about = $xls->val($row, 'L');

	                if ($name == "") {
	                    $valid = false;
	                }

	                $validator = new Zend_Validate_EmailAddress();
	                if ($email!="" && !$validator->isValid($email)) {
	                    $email="";
						$this->session->err+=1;
						$this->session->errorlog.=_("[Строка $row] Некорректный e-mail компании\n");
	                }

	                if ($valid)
	                {
	                    $crow = $this->db->fetchRow("select * from dacons_companies where `name` = '".str_replace("'","\'",$name)."' AND `manager` in (SELECT id FROM dacons_users WHERE customer_id = '".$this->session->customer_id."')");
	                    if ($crow != null) {
	                            $this->session->err+=1;
								$trance = array('%row'=>$row, '%name'=>$name);
								$this->session->errorlog.=strtr(_('[Строка %row] Компания "%name" уже существует\n'),$trance);
	                    } else {
	                        $company_id = $this->db->insert('dacons_companies', array('name' => $name,
	                                                                                   'site' => str_replace("http://","",$site),
	                                                                                   'email' => $email,
	                                                                                   'phone' => $phone,
	                                                                                   'address' => $address,
	                                                                                   'about' => $about,
	                                                                                   'manager' =>  $this->session->man_id));
							$this->session->added+=1;
	                        $peopleCount=10;
	                        $startCol = 13;
	                        $PersonColsCount=11;
							$personsData=array();
	                        for ($i = 0 ; $i < $peopleCount ; $i++) {
	                            $fc = $startCol + $PersonColsCount*$i;
	                            if ($xls->val($row, $fc)=='') break;
	                            $personsData[$i]['fio']=trim($xls->val($row, $fc).' '.$xls->val($row, $fc+1).' '.$xls->val($row, $fc+2));
	                            $personsData[$i]['phone']=trim($xls->val($row, $fc+4).' '.$xls->val($row, $fc+5).' '.$xls->val($row, $fc+6).' '.$xls->val($row, $fc+7));
								$personsData[$i]['email']=trim($xls->val($row, $fc+9));
	                            $validator = new Zend_Validate_EmailAddress();
				                if ($personsData[$i]['email']!="" && !$validator->isValid($personsData[$i]['email'])) {
				                    $personsData[$i]['email']="";
									$this->session->err+=1;
									$trance = array('%row'=>$row, '%name'=>$personsData[$i]['fio']);
									$this->session->errorlog.=strtr(_('[Строка %row] Некорректный e-mail контактного лица (%name)\n'),$trance);
				                }
	                            $personsData[$i]['comment']=trim(($xls->val($row, $fc+3)!=''?$xls->val($row, $fc+3):'').
	                                                        ($xls->val($row, $fc+8)!=''?', '._('день рождения').': '.$xls->val($row, $fc+8):''));
								$personsData[$i]['comment']=trim($personsData[$i]['comment'].($personsData[$i]['comment']!=''?', ':'').$xls->val($row, $fc+10));
	                        }

	                        foreach ($personsData as $k => $v) {
	                            $people_id = $this->db->insert('dacons_people', array('fio' => $v['fio'],
	                                                                                   'email' => $v['email'],
	                                                                                   'phone' => $v['phone'],
	                                                                                   'comment' => $v['comment']));
	                            $this->db->insert('dacons_people_company', array('person_id' => $people_id,
	                                                                            'company_id' => $company_id));

	                        }
	                    }
	                } else
	                    $this->session->err+=1;

	                $count++;
	            }
			} else {
				$this->session->err+=1;
				$this->session->errorlog .= _("Не определен менеджер, ведущий компании.\n");
				$count_end=$total;
			}

            if ($count_end < $total) {
                $this->session->count_start = $count_end;
				$trance=array('%from'=>($count_start + 1 - $header_count), '%to'=>($count_end - $header_count), '%all'=>($total-$header_count), '%count'=>$this->session->err);
                $this->view->message =
                    strtr(_("Внимание! Дождитесь завершения процесса, не закрывайте окно!<BR>
                     Обработаны строчки %from......%to (из %all всего)"), $trance)."<br>
                     ".($this->session->err?strtr(_("Ошибок в файле: %count"), $trance)." ":"")."
                    <SCRIPT LANGUAGE=\"JavaScript\">
                    idTimer=window.setTimeout(\"gotoLocation();\", ".($subscribe_interval * 1000).");
                    function gotoLocation() {
                            location=\"?go=finish\";
                            }
                    </SCRIPT>";
            } else {
                unlink($this->session->excel_file);
				unset($this->session->excel_file);
				if ($this->session->err!='') {
					$filename = "importdata/errorlog.txt";
		            $fp = fopen($filename,"w");
		            fwrite ($fp, $this->session->errorlog);
		            fclose ($fp);
				}
				$trance=array('%all'=>($total - $header_count), '%new'=>$this->session->added, '%err'=>$this->session->err);
                $this->view->message = strtr(_("Импорт завершён. Обработано %all строк. <br>".
                                        "Добавлено новых компаний: %new <br>"), $trance).
                                        ($this->session->err?strtr(_("Ошибок в файле: %err"), $trance)." <a target='_blank' href='".$conf[dir]."/importdata/errorlog.txt'>"._("Скачать лог ошибок.")."</a> <br>":"").
                                        _("Теперь можно закрыть окно.");				
            }
        } else {
           $this->importexcelAction(); 
        }
    }
}

?>