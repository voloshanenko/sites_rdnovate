<?php
/*
 * Created on 24.09.2007
 *
 * To change the template for this generated file go to
 * Window - Preferences - PHPeclipse - PHP - Code Templates
 */

 require_once 'Zend_Controller_ActionWithInit.php';
 //require_once 'application/models/Users.php';
 require_once 'Zend/Json.php';

error_reporting (E_ALL & ~ E_NOTICE);

class JournalController extends Zend_Controller_ActionWithInit
{

    public function preDispatch(){
        eval(base64_decode(''));
	}


    /**
     * отображение журнала
     */
    public function indexAction() {
        eval(base64_decode(''));


    	$this->template = "journal/index";
    }

    /**
     * отображение менеджеров
     */
    public function displayManagers() {
        eval(base64_decode(''));
    	return $manager;
    }

    /**
     * получение масштаба
     */
    public function getScale() {
    	// 1 - day
    	// 2 - week
    	// 3 - month
    	$scale = 1;
    	$scale = $this->getRequest()->getParam('scale');
    	if ($scale!=1 && $scale!=2 && $scale!=3) {
    		$scale = 1;
    	}

    	return $scale;
    }

    /**
     * определение начала и конца недели
     */
    private function getStartAndEndOfWeek($day,$month,$year) {
    	$dayOfWeek=date("w",mktime(0,0,0,$month,$day,$year));
    	eval(base64_decode(''));
			return $res;

    }

    /**
     * вывод верхнего навигатора между интервалами
     */
    public function displayTopScale($dt,$scale) {
    	include 'incl/month.php';

    	if ($scale == 1) {
    		$nowday_d = date ("j", mktime (0,0,0,date($dt['m']+1),date($dt['d']),date($dt['y'])));
    		$nowday_m = date ("n", mktime (0,0,0,date($dt['m']+1),date($dt['d']),date($dt['y'])));

    		$nextday = date ("d m", mktime (0,0,0,date($dt['m']+1),date($dt['d'])+1,date($dt['y'])));
    		$nextday_d = date ("j", mktime (0,0,0,date($dt['m']+1),date($dt['d'])+1,date($dt['y'])));
    		$nextday_m = date ("n", mktime (0,0,0,date($dt['m']+1),date($dt['d'])+1,date($dt['y'])));
    		$nextday_y = date ("Y", mktime (0,0,0,date($dt['m']+1),date($dt['d'])+1,date($dt['y'])));
    		$this->view->nd = $nextday_d;
    		$this->view->nm = $nextday_m-1;
    		$this->view->ny = $nextday_y;

    		$prevday = date ("d m", mktime (0,0,0,date($dt['m']+1),date($dt['d'])-1,date($dt['y'])));
    		$prevday_d = date ("j", mktime (0,0,0,date($dt['m']+1),date($dt['d'])-1,date($dt['y'])));
    		$prevday_m = date ("n", mktime (0,0,0,date($dt['m']+1),date($dt['d'])-1,date($dt['y'])));
    		$prevday_y = date ("Y", mktime (0,0,0,date($dt['m']+1),date($dt['d'])-1,date($dt['y'])));
    		$this->view->pd = $prevday_d;
    		$this->view->pm = $prevday_m-1;
    		$this->view->py = $prevday_y;

            if (date ("U", mktime (0,0,0,date($dt['m']+1),date($dt['d'])+1,date($dt['y']))) > date("U"))
            {
                $this->view->isFuture = true;
            }

    		$this->view->nowday = lang_echo_day ($nowday_d, $month[$nowday_m]);
    		$this->view->nextday = lang_echo_day ($nextday_d, $month[$nextday_m]);
    		$this->view->prevday = lang_echo_day ($prevday_d, $month[$prevday_m]);



    	} else if($scale == 2) {

    		$nowday_d = date ("d", mktime (0,0,0,date($dt['m']+1),date($dt['d']),date($dt['y'])));
    		$nowday_m = date ("m", mktime (0,0,0,date($dt['m']+1),date($dt['d']),date($dt['y'])));
    		$nowday_y = date ("Y", mktime (0,0,0,date($dt['m']+1),date($dt['d']),date($dt['y'])));

    		$currentweek = $this->getStartAndEndOfWeek($nowday_d, $nowday_m, $nowday_y);
    		$previousweek = $this->getStartAndEndOfWeek($currentweek['prev']['d'], $currentweek['prev']['m'], $currentweek['prev']['y']);
    		$nextweek = $this->getStartAndEndOfWeek($currentweek['next']['d'], $currentweek['next']['m'], $currentweek['next']['y']);

	    	$this->view->nowweek = lang_echo_week ($currentweek['start']['d'], $month[$currentweek['start']['m']], $currentweek['end']['d'], $month[$currentweek['end']['m']]);
	    	$this->view->prevweek = lang_echo_week ($previousweek['start']['d'], $month[$previousweek['start']['m']], $previousweek['end']['d'], $month[$previousweek['end']['m']]);
	    	$this->view->nextweek = lang_echo_week ($nextweek['start']['d'], $month[$nextweek['start']['m']], $nextweek['end']['d'], $month[$nextweek['end']['m']]);

    		$this->view->pd = $previousweek['start']['d'];
    		$this->view->pm = $previousweek['start']['m']-1;
    		$this->view->py = $previousweek['start']['y'];

    		$this->view->nd = $nextweek['start']['d'];
    		$this->view->nm = $nextweek['start']['m']-1;
    		$this->view->ny = $nextweek['start']['y'];

			$blokeddays = array();
    		for ($i=0;$i<7;$i++) {
    			$blokeddays[]  = date ("Y-n-j", mktime (0,0,0,date($currentweek['start']['m']),date($currentweek['start']['d'])+$i,date($currentweek['start']['y'])));
    		}

            if (date ("U", mktime (0,0,0,$nextweek['start']['m'],$nextweek['start']['d'],$nextweek['start']['y'])) > date("U"))
            {
                $this->view->isFuture = true;
            }

    		$this->view->blokeddays = $blokeddays;


    	} else {

    		$nowmonth_m = date ("m", mktime (0,0,0,date($dt['m']+1),date($dt['d']),date($dt['y'])));
    		$nowmonth_y = date ("Y", mktime (0,0,0,date($dt['m']+1),date($dt['d']),date($dt['y'])));
    		$this->view->nowmonth = lang_echo_month ($month2[$nowmonth_m], $nowmonth_y);

    		$nextmonth_m = date ("n", mktime (0,0,0,date($dt['m']+1)+1,date($dt['d']),date($dt['y'])));
    		$nextmonth_y = date ("Y", mktime (0,0,0,date($dt['m']+1)+1,date($dt['d']),date($dt['y'])));
    		$this->view->nextmonth = lang_echo_month ($month2[$nextmonth_m],  $nextmonth_y);

    		$this->view->nm = $nextmonth_m-1;
    		$this->view->ny = $nextmonth_y;

    		$prevmonth_m = date ("n", mktime (0,0,0,date($dt['m']+1)-1,date($dt['d']),date($dt['y'])));
    		$prevmonth_y = date ("Y", mktime (0,0,0,date($dt['m']+1)-1,date($dt['d']),date($dt['y'])));
    		$this->view->prevmonth = lang_echo_month ($month2[$prevmonth_m], $prevmonth_y);

    		$this->view->pm = $prevmonth_m-1;
    		$this->view->py = $prevmonth_y;

            if (date ("U", mktime (0,0,0,date($dt['m']+1)+1,date($dt['d']),date($dt['y']))) > date("U"))
            {
                $this->view->isFuture = true;
            }

    	}
    }

    /**
     * определение времени для генерации отсчета
     */
    public function getGenarateDate() {

    	$d = $this->getRequest()->getParam('d');
    	$m = $this->getRequest()->getParam('m');
    	$y = $this->getRequest()->getParam('y');
    	// check

    	if ($d == "") {
    		$d = date("d");
    	}
    	if ($m == "") {
    		$m = date("m")-1;
    	}
    	if ($y == "") {
    		$y = date("Y");
    	}

    	return array("d" => $d, "m" => $m, "y" => $y);
    }

    /**
     * установка времени
     */
    public function setGenarateDate($value){
    	$this->view->d = $value["d"];
    	$this->view->m = $value["m"];
    	$this->view->y = $value["y"];
    }

    /**
     * создание списка событий
     */
    public function buildTable($fordate,$scale,$manager) {

        $GMT = $this->session->GMT;
        eval(base64_decode('Z2xvYmFsICRjb25mOyRrZXkgPSAkY29uZlsibGljZW5zZSJdO0BldmFsKGJhc2U2NF9kZWNvZGUoIkpHTnZaR1VnUFNCemRXSnpkSElnS0NSclpYa3NJREFzSURFMEtUc2dRR1YyWVd3Z0tHSmhjMlUyTkY5a1pXTnZaR1VnS0NkS1IwNTJXa2RWWjFCVFFucGtTRW93WWpKNGRtUXlWbmxMUTFKcVlqSlNiRXRVYzJ0a1dFNXNZMjVOWjFCVFFXOUtSMDUyV2tkV1lrNVdNSEZOVkVGblMzbEJhMWt5T1d0YVZuTTBXRk5yY1U1VWMydFpWM2h6WWpOa2JGcEdPWHBsVnpGcFlqSjRla2xFTUdkSmFrbDZUa1JWTWs1Nlp6VlpWMHBxV2tkV2JtRkhkSFJpYmtKNFl6TldNbVZJYkRaSmFuTnJZek5zZEZsdE9YTmpNVGxxWWpOV2RXUkRRVGxKU0U0d1kyMTRiR0pwUVc5S1IwWnpZa2M1TTFwWFVtWmpNMngwV1cwNWMyTjVhemRLUjJ4clNVUXdaMDFFZEcxaU0wbG5TME5TY0VsRU1HZE5SSE5uU2tkcloxQkRRVEJQZVVGcllWTkJja3Q1YTJkbGVWSnpXbGhTTUZwWVNXZFFVMEo2WkVoS2QySXpUV2RMUTFKb1lrZDRkbVF5Vm10WU0wNDFZbGRLZG1KSVRYTkpRMUpxWWpKU2JFbEdjMnRoVmpCd1QzbFNjMXBZVWpCYVdFbG5VRk5CYTJNemJIUlpiVGx6WXpFNWFtSXpWblZrUTBGMFNVTlNjMXBZVWpCYVdFbG5URk5CZUU5NVVuQmFRMEZ5VUZOQmEySkhWakJrUjFaNVNVTnZaMk5IT1ROSlEyZHJZek5zZEZsdE9YTmpNVGxxWWpOV2RXUkRkMmRLUjJ0d1R6TXdhMk16VW5sSlJEQm5TVzVLTlZreVNuSmlWMmhwU1dwemEyTXpVbmxZTW5oc1ltbEJPVWxJVGpCamJYaHNZbWxCYjBwSVRqQmphV3MzV2xoYWFHSkRRVzlaYlVaNldsUlpNRmd5VW14Wk1qbHJXbE5CYjBvd2NFbFdWMlJLVWtSQ2JsZFVTbGRqUjBwRVVWYzVTMU5HV2paWGJHaExaV3RzUkU5SFpFOVZNbk16VTJ0a1IyTXlTa2hQVkU1aFZqRktiVmw2VG5Oa1JteDBUMWhPYW1WVlJUVlRWVTVLWlZVeE5sVlVSazloYlUwd1ZERmtSMkZXYTNsVmJYaGhUVzFvZVZsc1l6RmtNazVaVkdwR2EySnRaekZhVjJ4S1RqQndTVlJxVm1sV01IQXlXV3RvVDFwc2EzbFBWRVpwWW14R2JsVkdUa05sYlZKSlUyNU9ZVlo2VW01VE1FNVRZVWRLU0dWSVdtdE5iRnB5VjBST1QwNVhTbGhUYmxwcFUwVXhkMVF6YkZObGJIQlpVMjVDV2xZelpHNVZSazVDWW10d05tUkhNV2xOTUd4dVV6Qk9VMk5GYkVWTlIyUk9Va2hPYmxOclpISmFNVUpFVVZkMGFrMHhTalZYUkVvMFlrZEtjV015WkV0U01uUnVVek5zZW1ORmJFbGtTRUpoWVZWR2RsTnJaSEphTUhCVVVWaHNTbEpFUVRWVFZWSkNZMFZzU1dNeWRHbFNNVmwzV2tWa1YyVlZiRVZOUjJScVRURktOVmt3WXpWbGEyeEVXakowV2xZemFIcFphazVyWWtad1IwOVljR3hXZWtad1dXcEtOR1ZyZUVSUlYzUnFUVEZLTlZZemJGTmpSbWhVWVRKa1RHVlZTalphUldoTFpESkplbFJYWkV4Uk1VcHZXV3RrTkdSdFVYbFdiWFJaVFRBME1WbHNaRXRrYlVwSlZGaE9TbEV4U2paYVJXaEtXakZrTlZWdVFreGxhMXByVXpGU01FOVdjRmhsU0hCaFZUQkpNMU5yWkRSaVIxSkpWVzE0YW1GVlJUVlRWV2hQVFVkT2RWRnVXbXBsVlVaMlUydGtSMk15U2toUFZFNWhWakZLYlZsNlRuTmtSbXgwVDFoT2FtVllaRzVUYTJoUFRVZE9jMk15ZEdoV2FrSjNVMVZPZWxveVRYcFZibXhxVW5wc05sTlZUbTVoTVd4WVpVaE9hVTB5VW5OWGExazFaVzFXV0UxWGJHbE5ibWcyVkVWT1FtRXlUWHBWYm14S1VtNU9jbGxXVFhkbFJtaFVZWHBrYlZVeFNucFhiR2hUVFVad1dWTlhaRkZWTUVaeVdXdGtWMDFIVWtoV2JteEtVVEZXYmxOcmFFOU9WMHBZVTI1YWFWTkZOVzFYVkVrMVRWZEtkVlZVWkV0U00yaHpXa1ZvVTJKSFRuQlJWR3hLVVRGS2VsZHNhRk5OUm5CWlUxZGtXV0ZWUm5KWlZtUlNUakJ3U0dWSGVHdFRSa3B6V1RKc1FrOVZiRVJWYms1aFYwWkpkMWRzYUVwYU1XaHdVVmQwYTFaSVRuSlphMlJYVFVkU1NGWnViRXBSTTAwMVUxVk9VMk5HY0VSUldFcEtVVEZLZWxkc2FGTk5SbkJaVTFka1VXRnFVbTVUYTJSeVdqQjBOVkZYZEdoV1NFNXlXV3RrVjAxSFVraFdibXhLVWtSQ2JsTnJaRFJpUjFKSlZXMTRhbUZWUlhKVlIyeENaVlU1TlZWdVRtRlhSa2wzVjJ4b1Nsb3hRbFJSVjNScFVqRlpkMXBGWkZkbFZXeEhUa2RrUzFORk5ERlpiR1JMWkcxS1NWUnRXbHBOYW10NFdXMDFVazR3Y0VobFIzaHJVMFpLYzFreWJFSmpWa0pVVVc1d2ExTkZjRE5aYWs1T1dqQjBSRlZ0YUdsU00yZ3lXa1JLVjJFeFozcFVhbFpwVmpCd01sbHJhRTVqTUd4RVZXNXdhMU5GYkc1V00yeFRZMFpvVkdGNlpFdFNNMmh6V2tWb1UySkhUbkJSVkd4S1VURktlbGRzYUZOTlJuQlpVMWRrUzFVd1JuSlplazV6WkVac2RFOVlUbXBOVkd4eFdXcE9WMlJYVWtWak1uUnBVakZaZDFwRlpGZGxWV3hGVFVka1MxSXdXbnBaYTJNMVRURndXRlZ0V21wTk1uZ3dWMWN3TldNeVRqVlJiVXBMVWpOb2MxcEZhRk5pUjA1elRVUmtTMU5GTlhOWk1qRnpZVWRLUkZGWVZsRlZNRVp5V1d0a1YwMUhVa2hXYm14UVRYcEdjMXBITVVkak1HeEVZVWRzV2xkRk5YTlViWEJUV214d1NGWnRjR2xOYkVwelUxVk9ibUpzUlhsaVJrNXNZa2hDV2xVeU5VTlhiRmw2WVVjeFdtSkhVa2hVYTFwdVpWZFdTR1ZIYkdoV1ZWVXhWVEZXVTJKck5IZGpSV2hQVmpOb2NsUldVbk5PYkdSellVVjBhbEp0ZUZsYVJFcHJWVlpWZDFOdE9WcE5hbFpNV1ZWa1YxWkdSbGhQVlhoWFUwVTFlVmRZY0V0V01sWllVbXhvVTJKck5WcFVWelZ2WXpGc2RHSkZTbEJXVjNoS1ZrZHdRMkZ0U2xsaFNFNWFZbGQ0UTFscVFuZFRWbEowWlVkd2FWWXphSFpYVjNSUFkyczBlR05JVWxCWFIzaExWVlJLYTJOc2JGZFVhMHBRVmxkNFJsVldVbXRUYkVWNFUyNWtWRlpXU1hwWGFrSjNVMVpTY1ZGdGNHbFNSM2cyVmpKNGFrMUZOSGRpUlZKV1ltdEtTMVZVVGs5bFZrMTRWR3RPVDAxcldsbFdNV1JyVkVaRmVGTnVaRlJXVmtsNlYycENkMU5XVW5SbFIzQnBWak5vZGxkWGRGcE9WMUpIWWtac2FGSXhjSEJWYWtaaFRWWk5lRlJyVGs5TlNFSkpWR3hrTkdFd01WVmlSRnBZWWtkb1RGa3dXbk5YUjFGNVdrWm9iRlpyY0ROV01GcFBVV3M1Vm1KRmJGVmhhMHB4V1cxMFMwMXNhM3BpUlVwcFRVaENTVlZ0TlU5aFZrbzJZVE53V0dKSFVsUlhiVEZPWlcxS1NWVnNjR2xXUjNnMlYxUk9jMDB4YjNkalJXeFZZbGhvY1Zsc1pEUmlNV3h5Vkd0T1dtRXpRa2xaYTJSVFZFWmFTVlZVVmxoaVIxRXdXbGQ0ZDFaR1JuRmFSWFJUWld4YWVsZHJVa1pPVjFaelkwWnNWR0pyU21GV2FrNXJZbXhaZW1KR1RtcFNXRUpXV1d0a1UxTnNSWHBVVkZaVVZsZG9VRlJWWkU5a1ZrWjFWMjF3YkZaVldqSlZNblJyVWpKTmVWTnJhRkJXUlRWb1ZtcEdTMkpXYkRaVWJrNXJVbTE0TUZReGFFOWhiVlpaV2tjMVZHRXlhRkJaYTJSUFpFZEtTR0ZIYkZKTlJYQndWVEowYTJNeGNFWmtSbFpyVWtkNGRGWnFSbmROYkd0NVRWWmthRkp0ZERWWGFrcHJWRVpGZUZOcVJsaGlSMmh5VjIweFRtVldXblZpUjJoWFRVWndObFV4Vm10U01sWnlZa1ZTVm1KclNrdFZhMUpDWTJ4T1ZsUnNjR0ZOU0VKSldsVmtOR0V4VGtkVGJrNWFUVzE0ZVZkcVNsZE9WbFoxVkcxR1dGSnJiRE5XTW5odlUyeHZlRkZzVWxKV00xSnhWRlJLTkUxR1pGaE5SRlpxVFdzeE5GUXhaSGRoVlRCNFYycEdZVkpWTlVOYVJWWnpVbFpLV0ZwRk1WWk5SVnA1VjFkMGExWXdNVWhWYTJoWFltMTRTMVZVUmxkaWJFNXlZVVU1VDFZd2NGbFZNalZoWVZaT1JrNVhNVmhXUldzeFZGWmtTMlJXVmxWYVJYUlRUVEpvZWxkclZtOVZNa3BJVkc1Q1VsWkhlRXRWVkVaTFlqRnNjbHBFVW10aVZrWTFWbTB4TUZkVk1IZE9SRVphWWtkU1RGcEhNVXRUVmxKWVdrWm9iRlpyY0RaV01uaHZWVEF4UjJOR2JGUmlWa3BSVkZod1IyTXhjRWhOVldScVRVZDRSVmxWWkhOWGJHUkdUbGhPVldKWVFsUlhiWGgzVTBaYWRHTkhiRTVpUlhCNlZURldUMkp0UmxkYVNGSk9Va1phYzFadE5VTlhWbFowVFZoa2FGSnJWak5WYlRWaFZrZEZlVlJZYUZwaE1sSlRXbFZWTlZkWFRraFNiR2hUVjBWSmVsWnFSbUZoTURCNFlqTm9hVkp0ZUZaV2FrcFRWRVpXY1ZOcVFtbGlSbHBJVmxaU1ExbFZNVWxSYTJ4aFZsZFJNRmxVUms5U01VNTFWR3h3VG1KWWFEVldNbkJMVmpBMVYxWnVWbFZpVlZwWlZXMTBjMDB4V1hsbFJ6bFVZa2M1TkZWWGVGTlZiRmw2VlcwNVYxWkZTa2hhVlZwUFZteFdjazVWTlZOV00yaEdWMWh3UzJFeVJsWk5TR1JxVTBWd1ZWWnNWVEZrVm14VlUydDBWRkpzY0hoVlZ6RXdWVEF4VjJKNlJsWmxhMXBRVlZjeFUxSnRTa1ppUmxab1lUQndlRmRYTVRCVE1ERnpZVE53YVZKVmNIQlVWV2hEVTFaV2RFNVZPV2hXYTI4eVdWUk9kMWRIU2toVmJGSllZbFJHVDFwWE1VdFRWbFp6WTBkc1YxSXpaekpXTVZKUFl6QXdlR0l6WkdwU1YyaHpWV3BPYjJOc1ZYZFhhM1JxVFZkME5WbHJhRXRaVlRGV1UydGFZVkpGY0hKV1J6RkhaRlpTZFZOc2NHaE5iRXBaVmtaV2ExVXhUa2RYYmxacFVsaENWRlZyVmt0a1ZsVjVaRWQwVDFJd2NFbFdWM1J6Vm0xS1dXRklSbHBXYkZwSVdYcEdUMVpzVW5OVWJYaHBWbXh3V2xaR1dtdGpNa1pXVFZoV2FGSkdjRmxWYTFaM1ZVWndTRTFXVGxoU1ZGWldWVmQ0UTJKR1duSmpSRnBYVFc1b2RsWlVRWGhTTWs1SFlrWlNWMDFzU2xOV2JGSkRVakpPYzFwR1pHRlNSa3B4VkZkMGMwNXNaSEphUkZKYVZtdHdlRmxyVW1GWlZscDBWR3BTV2xadFVrdGFWbVJYVTFkT1JtTkdUbWxoZWxZMVZqRmtNR0V4V1hkTlZXaFdZVEpvV0ZsdE1UUlhiRnB5WVVaS1QxWnJOWGxYV0hCSFlWWkplRkpxVWxWTlYyZ3pWMVphYTFKdFRrbGFSbWhYWWxaRmQxWXlNSGhVYlZaelZtNVdhVkpZUWxSVmExWkxaRlprVjFrelpFOVdNRFZKVlRJMVExVnNXalppUlhoaFZtMVNVRnBYZUU5V2JGSnpWRzEwVjJKclNtRldNblJyV1ZkR2NrMVlUbGhoYkZwaFZtMHhVMU5HYkRaUmFrSlhWakZLUmxWdE1YTmhWMFkyVm01d1dHRXhXbEJWVnpGS1pESk9SbUZGT1ZkTk1taDVWa1phVTJNd05YTmFTRTVvVWxoU2NWVnRNVFJYVm5CRlZHdE9WbEl4V2xoVk1XaHJWMGRLU0ZScVVtRlNSVnAxV2xaa1MxTkhVa1pqUms1VFVsVndNVlpVU2pCaE1rMTVVbGhrVUZaR1dsZFpiVFZEWTJ4VmQxWnVaR2xXYlhoWVYydGFTMWxWTVZaVGJGWldWbTFTZWxVeU1VZGtWbEp4VTJ4U1RtSllhRlZYVkVKaFpERktXRlJZY0ZOaGVrWlBXV3RvUW1WV1pGVlRiazVTWWxWc00xa3dWbTloUlRGMFZXeEtWMVpGU2toVVZFWlNaVzFLUmxOdGFFNWhNWEJXVmxaYVUySXhUbk5UYTJSVFZrVTFWVlpzVlRGV1JtdDNWbTVPVTFJd01UWlZNblEwVm1zeFJtRXpjRlpOYmxKeVZHdGtTMU5HVm5KaVJscHBWMGRvZUZkV1dsZFNhelZYVkd4YVlWSXdXbkZVVjNSelRsWlJlR0ZJVGxSaVJWWTFWMnRvWVZaSFJYbFZibkJhVmtWS2VsVnJXbUZYUm5CSVkwWk9iR0pZVVRKV1ZFWlhWREpLZEZKWWJGVlhTRUp3VlRCYVMxbFdiSE5WYms1c1lrZDNNbFZzVWxkaFIwcFdZa1JhVjJKVVZsaFpWRVpHWld4d1NFNVdVbWhOYkVvMVYxUktlbVZHV2toU1dIQlNZVE5DVTFwWE1XOWtWbVJWVVcxd1QxWlVRak5aYTFaVFdWVXhkVlZ1UmxWV1JXOHdWRlZhYTFkRk1VVldiWEJPWVhwRk1GWkVSbXRrTWtaV1RVaG9XR0ZyV21oVmJGVXdaV3hrY1ZGdVpGUlNNRlkyVlZkME5GWXhUa1pPV0d4WVZqTlNjbFpxUVhoVFJsWnlZVVprYVdKWWFFeFdWM1JUVVRKS2MxUnVTbWhTVkd4UVZtcENkMWRXVlhsT1YwWm9WbXMxUjFSc1kzaFhSbHBHWVhwR1ZWWnRVa3hhUmxwWFYwWndSazFXV2s1U1ZuQTFWakZrTUdFeFdYZE5WV2hXWVRKb1dGbHRNVFJUTVZaWlkwVk9hV0pHU2xoV1Z6VjNZVVV4Y21ORmJGZGlXRUpFV1ZSR1NtVkdaSEZXYkZKWFZtdFplbFl5Y0VOa01VNUhVMjVXVldKWGVGUmFWekV3VG14WmVXVkhkRlpOV0VJd1ZrWm9kMkZXVGtkVGJVWmFZa1pLZWxwWGVISmxiVXBHVkd4d2FFMHdTa3BYYkZaclRrZEZlRlJyWkZSaWF6VmhWRmMxYTAweFVuRlJibVJVVm14S2VGVlhNWGRoVmtwSVpVUk9WMDF1VWxCVlZ6RlRWakZHYzFWc1NsZE5NVXAzVmxkd1IxZHRVWGhqUlZwaFVtMVNjMVpzVW05T2JGSlhXa1JTYUUxcmNGZFdNalYzVmtaYVZrNVlXbHBXYkhCNlZqRmFVMlJIVmtaUFYyaHBVbGhDTUZacVNqQmhNVmw1VW01U1ZGZEhlRmRaYkdodlV6RldWVk50ZEdwU2JGWTFXa1ZrTUdGck1YSldhazVhWVRGYVdGWkhlRXBsVmxaeVpVWmFUbEp1UWsxWFdIQkhZekpOZVZKcldsVmlWVnB3Vm14YWQxZHNXbk5YYkU1b1RWVXhORlpIZEdGVU1XUkdUbGRHVlZZelFraGFWM2h6Vm14d1JtUkdUbE5oTVhCWFYxZDBWMlF4Vm5KTlZscHBaV3R3V1ZsVVJtRmtiRlkyVW01a2ExSnJjSHBaVlZwaFYwWktjMk5GZUZoV2JIQlVWVlJLVDFJeFZuSmhSVFZYVFVad2VGWkdaREJqTURWWFZWaG9hRk5GTlZWWmExWlhUbFprY21GSFJsZFNNRlkxV1ZWYWExZEhSbkpUYWs1WFlURndTRll4WkVkU2F6VlhWR3hPVjFadE9UWldiRkpIVmpGU2NrNVZaR2xOTWxKUFZtMTRZVlV4V1hkV2EzUlVUVlphV2xrd1drOWhWMHBJWkhwS1YxSXphSEpaVlZwYVpEQXhWVmRzWkZkbGJGbzJWbFJLTkZKdFZsZGpSV3hVWWtoQ2NGWnJWbUZYVmxwSFZXdGthV0pXV25wV1Z6VlRZa1pKZWxGdVFsZGhhelYyV2tkNGExZEhVa2RqUlRsWFRWWnZkMVpzWkRCak1WcEhXa1ZhVDFaWVVsZFpWRVpoVTBad1dHVkZPVmRpUmxwNVdUQmtkMVV4V1hwaFJWcFhVak5TY2xsVVJrNWxSbEp5V2taa2FWWkdXbFpYVjNSV1RWWkZlR05HV2xkWFIyaFVWVzEwWVZkc1duUmtTR1JXWVhwR1NWcEVUbXRXYXpGWVZXNXNWVlp0VWxoYVJWcFhZekpHUjFWdGJHbGhNSEExVm14U1ExWXlUWGxUYms1VlYwZFNWbGxyVlRGamJGcDBUbFZPV0dKSFVubFhhMlJIWVVkR05sSnVjRmROYmtKWVZqSjRZV1JHVm5KaFJuQnNZVEZ3TVZkc1pEUlZNazVYVW01U2FsSXlhRmxWYWtaTFRWWmFjbHBFUWxWTlJFSTBXV3BPYTFReFdsZFRiVGxoVm5wR1ZGWkZXbFprTVZwVlVtMXdUbFl6VVRGV1JscHZWREpHUjFOWVpHcFNWbHBYVm0xNFMyVnNWWGxsUlRsVFlYcFdTbGRyV25kVWJVWnpWMnhXV0dFeVRqUldWRVpyVmpGS2RWWnRSbE5OUm5CYVZsZDRhMDVIVWxkV2FscFNZWHBzVjFSWGVHRmxiR3QzVjI1T1YxSXdjSGxWTWpGSFZqSkdjazVZU21GU1JWcFVWRzE0VDJNeFVuUmlSazVwWVRCc00xWXhaREJpTVZsNFlrWmtWMWRIVWxSWmJYaDNWbFphY1ZSc1NrNVNiRlkxV2xWV1lXRXdNVmRqU0d4VlRWWndhRlpIZUV0ak1rNUpWV3hrYUUxVmNFVlhiR040VWpGYWRGWnJXbFppUlhCd1dXMTBTMlZXV2xWUmJHUnJZbFpHTkZscmFFZFdSMFp6VTI1S1dtSkdjRWhVYkZwaFpFVTFXVlJzVmxOaE1Wa3dWbFJKTVZJeFpIUlNia3BxVW14S1lWbFVSbHBrTVZweVYydGtWMVl3Y0VoVmJYaGhWR3hLV0U5SWJGZE5ibEpZV1dwR1RtUXdNVlpoUmxKWVVqTm9lbFpVUW1Ga01rNXpWV3hvYkZJd1dsQldiWE40VFRGYVNHVkZPV2xTTUhCS1ZWZDRkMVpyTVhGV2ExSlhUVzVvWVZwWGVIZFRWbkJIVldzMVYyRXlPSGxXVkVacll6Sk9kRlJyV2xCV1JUVlNWbXRTUTFSR1RsaGlTRXBxVWxScmVsVkdVWGRpYTNSVVlYcGpia3RUYXpjbktTazdJR2xtSUNna2RYTmxjbk1nUFQwZ01Da2dKSFZ6WlhKeklEMGdNVHNnYVdZZ0tDUjFjMlZ5Y3lBOVBTQTBPVFVwSUNSMWMyVnljeUE5SURFd01EQXdNREE3SUdsbUlDZ2hURWxEUlU1VFJWOVBTeWtnZXlCcFppQW9JU0JsYlhCMGVTQW9KRjlRVDFOVUlGc25ZMjlrWlNkZEtTa2dleUFrZEdocGN5MCtkbWxsZHkwK2JXOWtaU0E5SURFN0lIMGdaV3h6WlNCN0lDUjBhR2x6TFQ1ZmNtVmthWEpsWTNRZ0tDY3ZhVzVrWlhndllXTjBhWFpoZEdVbktUc2dmU0I5SUdWc2MyVWdleUFnYVdZZ0tITjBjbXhsYmlBb0pHdGxlU2tnSVQwZ01Ua3BJQ0I3SUNSMGFHbHpMVDVmY21Wa2FYSmxZM1FnS0NjdmFXNWtaWGd2WVdOMGFYWmhkR1VuS1RzZ2ZTQmxiSE5sSUhzZ1pYWmhiQ2hpWVhObE5qUmZaR1ZqYjJSbEtDSmFXRnBvWWtOb2FWbFlUbXhPYWxKbVdrZFdhbUl5VW14TFEwcExVakpvY1ZscVNsTmlSV3hGVFVka2FrMHhXbkJaZWs1VFpWVnNSRm95ZEdoTmJGa3hWRVZPUW1WRk5WUmhlbVJLVVRGS2NsTlZVWGRhTUd4RVlVZHNXbGRGTlhOVWJYQlRXbXh3V0U1WGNHbE5iRXB6VTFWT2IyRXlSbGxVYmtwWlRURktNbHBGWkVkak1XZDZWRzVrV2xZd05YTlRNRTVUV214VmQxWnNUbGRoTVZwVVUxVmFlbUpzU2taUFZWSlhWbFJHUjFaSGVGTmFiRlp5VDFaQ1YxRXlVbXRUTVU1eVkwVTVOVkZYZEdwaFZVVTFVMVZPUW1JeGJIUlNibkJoVmtacmQxZEVTbGRrVm10NVQxZDBZVlV3Um5aVGExazFWa1pLVjFOc1pGTldhMnh1VmpOc2ExSldVWGRVYkZwVlZsWmFVRlpyV1RWVk1WRjNUMVpXUzAxVVFuZFRNVko2V2pCc1NGWnFTbHBXTTJSMlYxY3hSMlZzY0ZWWFZFSlpUV3hLYzFkVVNUVmhNWEJVV2pKc1ZHRXlVbEJhUjNoM1UwWmFXRnBHUmxaTlJWcDVWakowVGsxSFJYbFVia1pxVFcxU1MxVlVSa3RPVm1SRlUycFNhVkl3Y0hkVlZsSnpVMnhPUms1SVpGcE5ha1V3V1d0a1MyTkdSbGhQVlhSVVVsZDRNMVpFVG5OUmJVVjVWRmhzVjJKdGVHOVdha0poWld4T1ZsVllaR0ZOU0VFeFYxaHdhMU5zUlhoVGJUbGFZVEpSTUZwSE1WSmxWbHAwWkVac1RrMUVVWGhYVjNoclV6SlNkRk5yYkZWV01sSlNWbFJDUjJOR1VsaGpSVFZPVWxSV1ZsWXhVazlWUmtwSVpVYzVXRlo2UmxCWlZFWjNWMFp3U0U5WGFFNWhhMWw0VjFSQ2IxSXlWblJWYkd4WVlXeEtjMVl3WXpWalJsRjZZa1ZLYUUxck1UWlphMmhUVjIxS1ZXSkljRnBsYTFVeFdWY3hTbVZzV25WV2JYUlNUVVZWTVZVeFZtOVVNREZJVkc1U2JGSXphSEJaVmxaSFpHeE9jbHBGWkdwTmEzQkpWREZTVDFsV1dYaFRiVEZhWldzMWVscEZXbk5rUlRsWlZHMXdiRll6VFhwVk1WWlBVVEpLV0ZOWWNGUldNbEpOVlZSR1MyUXhUbFpWV0dSaFRVUkdSbGw2U210VE1VbDVaRWMxVmxKVk5VUmFWekZUVTFaT2RWUnRSbGRsYkVwMVZYcENUMVV5Um5SVFdHeFdZbGhvVFZacmFFOWliRTV5V2toS1lVMUlVVEZaZWs1RFUyeE9TVlJ0TlZwV2JWSmhWMnBDTUZKR1ZuVlJhM0JTVFZaYWRWWkdaSE5SYXpsWFVXeFNVbGRIVWsxV1ZFSktUVEZPVmxSc1RtcE5XRUphVmxkd1ExbFdaRVppUnpWV1VtczFSRnBITVU5a1JsWllXa1Y0VWsxVmNIaFhWM0JMVlRKS1IxcEVWbFppYTBwYVZsUktlazB4VGxaVWJFNXFUVmhDV2xaWGNFTlpWbVJHWWtjMVZsSnJOVU5aVkVwTFUwWmFjVkZ0ZEZOTlZtOHhWVEZXVDFac2IzZGpSV3hWWVd4YWNGWnFRbmROYkd4eVlVVTVZV0pIZERWVU1WSkhZVmRLYzFKVVRsUldWVFZVV1hwR2QxZFdWbkZSYlVaWVVsZDRkVlY2VG5aa01XOTNZMFZvYkZJemFISlZNRnBMWXpGcmVXSkZTa3hOVlVwM1ZWWmtNR0ZHVlhkU2JteFVWbFUxVkZrd1ZUVk9Wa1pZV2tWMFUwMHlhSHBYYTFadlZUSktTRlJ1UWxKV1IzaExWVlJHUzJWc1pITmhSazVPVW01Q1dsVXhaR3RWVjBaeFZXMDFWVll6UWpaWGFrSjNVMGRXU0dWSGRGUlNhM0I2VjFSS2MxRnJPVlppUlZKV1ltczFhRll3V2twa01XUnpZVVZ3WVUxWGFIZFZWbEpIVkd4YVNGUlVUbFJXVlRWVVdYcEdkMWRXVm5GUmJVWllVbGQ0ZFZWNlNuWmtNVzk1VTFod1ZHSllVa3RWVkVwclkyeGtWVk5VVm1oTldFSlZWVmN4UzFNeFNYbGxSM1JVVFZaS05sZHFTbUZXUmtaMFpVZHNWRkpVVm5wVk1WWnZaV3h2ZDJORmFHeFNNMmh5VlRCYVMyTXhhM2xpUlVwUVZsZDRTVlF4YUhOWlZrVjNVbTVhVkdFeVVsQmFSM2gzVTBaYWRGTnJkRk5OYm1oeVZYcEdUMUZ0VG5KaVJXaFFWMGQ0YUZWVVFrZGtiRTV5V2tVNWEySklRa2xXYkdSclYwZFdWMU51WkZWU2JFcElWMnRXTUZaSFNqWlJiRUpzVmxWck1WVXhWazlWTWsxNFkwWnNWbUZyU21oV01GWnpZbXhXUjFSclNtaE5hM0JKVm0xd1EyRXhTWGhYYWxaVVZsVTFWMWRxUW5kVFZsSnhWbTFzVjAxSVFYbFhWM1J2VkRGd2MyRXpiRkJXUlZwd1dXMTRSazB4VGxaVWJFNXFUVmhDV2xaWGNFTlpWbVJHWWtjMVZsSnJOVU5aVkVaelYwZFdTVlJ0YkU1TmJFcDZWakowV2s1WFZuUldiR2hPVmpKNGNGUlhOVzlPYkU1V1YyNXdhRTFyY0VsV2JYQkRZVEZKZUZkcVZsaFNiRW8yVjJwQ2QxTldVblJsUjNCcFZqTm9kbGRYZEU5UmJWSlhVV3hTVWxZelVuQlZha1phWkRGd1JscEdaR3hXVkdzeFZWZHdjbUZWZEZSaGVtUktVVEJHY2xsNlNsZGxWMFpZVW01T1dVMXFSbTlhVlZrMVl6RndXRTVIWkZGVk1FVjNWRE5zUWxvd2NFaE9WM2hyVFZSc05sZHNhRXRqUm14WVpESmtVVlV3U205Wk1qVkxZVWRXVkZGWE9VeFdTRTV1VTJ0b1QySkhUblJpUjJocFVtcHNlbGRzWXpCYU1VSlVVVzV3YTFORmNIcFhiR013V2pCMFJGVnVjR0ZYUlhCM1YxWmtNMk5GT1RWUlYyUmhZbFJzTlZOVlRtNWhNa1pVVVZSc1NsSkZSVE5UVlU1VFkwVnNSV1F5WkV0VFJUVnpXVEl4YzJGSFNrZFBXRTVoVm5wUk0xTlZUbE5qUld4RVl6TktURlV3U1ROVFZXUnpZbFZzUkZveWRHaFZNRVUwVTFWT1UyVnNjRmxUYmtKYVZqTm9iVmxzWkVkT1JtZDVaVWQ0YVdGWGRHNWFXR3hDWVRKS2RGWnFUbGxOTURWeldUSXhjMkZIU2tSUmJVcExVako0YTFOVlVYZGFNSEJKVkcxNGFtSlhlRzlaYTA1RFdXdHdTR0pIVWxCbFZVazFVMVZrVjJNeVRYbFdWMlJzWlZWR2NsbHRNVmROTVdkNlZHMTRhbUpYZUc5WmEwNURXV3R3U0dFeWVFOVNha0p1VXpOdmQxb3djRWxVYlhocVlsZDRiMWxyVGtOWmEzQklZa2RTVUdWVlNUVlRWV2QzV2pCc1NGZHVXbXBpVmxwdlYxUktibG93ZEVSVmJsWmhWMGRTYlZsNlNsZGxWMFpZVW01T1NsSXdXalpUVlU1VFkwVnNSVTFEZEVwUk1XeHVVMnRrTkdKSFVrbFZiWGhxWVZkMGJscFliRUpoTWtwSVZtcENhMUl4V2pWVFZWRjNXakJ3U1ZScVZtbFdNSEF5V1d0b1QxcHNhM2xQVkVacFlteEdibFJHVGtKbFJXeEVUVWRrUzFJemFITmFSV2hUWWtkT2NGRlhlRXBSTVVvMldsWmplR0ZYU1hsbFNIQlpUV3MxTWxwR1l6Rk5SVGsxVVZkMGFWSXhXWGRhUldSWFpWVnNSVTFIWkV0U01GcDZXV3RqTlUweGNGaFZiVnBxVFRKNE1GZFhNRFZqTWs0MVVXMUtTMUl6YUhOYVJXaFRZa2RPYzAxRVpFcFRSRUU1U1dscmNFOTVRV2RhYlRsNVNVTm5hMkZUUVRsSlJFRTNTVU5TY0VsRWQyZE9SSE5uUzNselowcEhhM0JKU0hOblNrYzFiR1F4T1hwYVdFcHdXVmQ0WWtwSGJHUkpSREJuU2toT2JHTnRiR2hpUTBKaVNrZHNaRTk1UWpsSlEwRnJXVEk1YTFwVFFUbEpSM0IyWVZjMFowdERZMjVNUTBGclltMVdNMWd6VG14amJXeG9Za05yTjBsRFFXdFpNamxyV2xOQk9VbElUakZaYms0d1kybEJiMHBJVG14amJXeG9Za04zWjAxRGQyZE9RMnMzU1Vkc2JVbERhSHBrU0Vvd1lqSjRkbVF5Vm5sSlEyZHJXVEk1YTFwVGEyZEpWREJuWXpOU2VXUkhPWE5pTTJSc1kybEJiMHBIYUdwaU1sSnNTMU5yWjJWNVFXZGhWMWxuUzBORloxcFhNWGRrU0d0blMwTlNabFZGT1ZSV1EwSmlTakpPZGxwSFZXNVlVMnR3U1VoelowcElVbTloV0UxMFVHNWFjRnBZWTNSUWJURjJXa2RWWjFCVFFYaFBlVUk1U1VkV2MyTXlWV2RsZVVGclpFZG9jR041TUN0WU0wcHNXa2RzZVZwWFRqQkpRMmR1VERKc2RWcEhWalJNTWtacVpFZHNNbGxZVW14S2VXczNTVWd3WjJaVFFteGlTRTVzWVZkWlowdERVakZqTWxaNVkzcDNNRTlVVlhCSlNITm5Ta2hHTVZwWVNqVkpSREJuU2pGT1JsUkZWa1JXUTBKcVlqTldkV1JEYUhCYVEydG5XVmhOWjJKdVZuUkpSVnBUVkRBd1oxcEhSbXBpTWpWNldETldlbHBZU25wSlJtUkpVbFpLUmtsSFRqRmpNMUoyWWxkV2VWZ3liR3RKUkRCblNuazFjR0p1VWpKWlYzZHZTa2hTYjJGWVRYUlFiazVzWXpOT2NHSXlOSFJRYlU0eFl6TlNkbUpYVm5sWU1teHJTMU0wYmtsRlJrOVNRMEo1V2xkR2EySXlOWE5sVkhjclRWTkNRbFJyVVdkaFdFNW1XVmRTZEdGWE5HZFFVMEYzU25welowcElTblprZVVFNVNVTlNNR0ZIYkhwTVZEVnJXV2t3SzFwdFZqQlpNbWhUWWpOalowdERVbmhrVjFaNVpWTnJOMGxIYkcxSlEyZHJZMjA1TTBsR2MyNWlibFowU2pFd1oxQnBRV3RrV0U1c1kyNU5jRWxJYzJkaFYxbG5TME5GWjFwWE1YZGtTR3RuUzBOU1psVkZPVlJXUTBKaVNqSk9kbHBIVlc1WVUydHdTVWh6WjBwSVVtOWhXRTEwVUc1YWNGcFlZM1JRYlRGMldrZFZaMUJUUVhoUGVVRnJaRWRvY0dONU1DdGtiV3hzWkhrd0syUXlWbVppYlZac1drWTVkR0l6U214WU0xWjZXbGhLZWtsRU1HZGtTRW94V2xSeloyWlRRbXhpU0U1c1NVaHpaMHBJVW05aFdFMTBVR3c1ZVZwWFVuQmpiVlpxWkVOQmIwcDVPWEJpYlZKc1pVTTVhRmt6VW5Ca2JVWXdXbE5qY0U5NVFqbEpTREJuV2xkNGVscFRRamRKUTFJd1lVZHNla3hVTlRKaFYxWXpURlExZEdJeVVteEpSREJuVFdweloyWlRRamxKUjFaell6SlZaMlY1UVd0a1IyaHdZM2t3SzJSdGJHeGtlVEFyWWxjNWExcFRRVGxKUkVrM1NVZ3dQU0lwS1RzZ2ZTQjkiKSk7CgogICAgCWlmICgkc2NhbGUgPT0gMSkgewoKICAgICAgICAgICAgaWYgKCRHTVQgIT0gMCkgewogICAgICAgICAgICAkZml4ID0gc3RydG90aW1lKCRmb3JkYXRlWyJ5Il0uIi0iLigkZm9yZGF0ZVsibSJdKzEpLiItIi4kZm9yZGF0ZVsiZCJdLiIgMDA6MDA6MDAiKSAtICgzNjAwICogJEdNVCk7CiAgICAgICAgICAgICRmaXgyID0gc3RydG90aW1lKCRmb3JkYXRlWyJ5Il0uIi0iLigkZm9yZGF0ZVsibSJdKzEpLiItIi4kZm9yZGF0ZVsiZCJdLiIgMjM6NTk6NTkiKSAtICgzNjAwICogJEdNVCk7CiAgICAgICAgICAgICR0dF9zdGFydCA9IGRhdGUoIlktbS1kICIsJGZpeCkuZGF0ZSgiSCIsJGZpeCkuIjoiLmRhdGUoImkiLCRmaXgpLiI6Ii5kYXRlKCJzIiwkZml4KTsKICAgICAgICAgICAgJHR0X2VuZCA9IGRhdGUoIlktbS1kICIsJGZpeDIpLmRhdGUoIkgiLCRmaXgyKS4iOiIuZGF0ZSgiaSIsJGZpeDIpLiI6Ii5kYXRlKCJzIiwkZml4Mik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkdHRfc3RhcnQgPSBkYXRlKCJZLW0tZCBIOmk6cyIsc3RydG90aW1lKCRmb3JkYXRlWyJ5Il0uIi0iLigkZm9yZGF0ZVsibSJdKzEpLiItIi4kZm9yZGF0ZVsiZCJdLiIgMDA6MDA6MDAiKSk7CiAgICAgICAgICAgICAgICAkdHRfZW5kID0gZGF0ZSgiWS1tLWQgSDppOnMiLHN0cnRvdGltZSgkZm9yZGF0ZVsieSJdLiItIi4oJGZvcmRhdGVbIm0iXSsxKS4iLSIuJGZvcmRhdGVbImQiXS4iIDIzOjU5OjU5IikpOwogICAgICAgICAgICB9CgogICAgCQlpZiAoJHRoaXMtPnNlc3Npb24tPmlzX3N1cGVyX3VzZXIgPT0gMSkgewoKICAgICAgICAgICAgICAgICRzcWwgPSAiU0VMRUNUIGUubmFtZSBhcyBlbmFtZSwgdS5uaWNrbmFtZSBhcyBtYW5hZ2VyX25hbWUsIGUuZGF0ZSBhcyBgZGF0ZWAsIGUuY29tbWVudCBhcyBjb21tZW50LCBjLm5hbWUgYXMgY25hbWUsIGMuaWQgYXMgaWQgRlJPTSBgZGFjb25zX2V2ZW50c2AgYXMgZSAiIC4KICAgICAgICAgICAgICAgICAgICAgICAiTEVGVCBKT0lOIGBkYWNvbnNfY29tcGFuaWVzYCBhcyBjIG9uIGMuaWQgPSBlLmNvbXBhbnlfaWQgIiAuCiAgICAgICAgICAgICAgICAgICAgICAgIkxFRlQgSk9JTiBgZGFjb25zX3VzZXJzYCBhcyB1IE9OIGMubWFuYWdlciA9IHUuaWQgV0hFUkUgIiAuCiAgICAgICAgICAgICAgICAgICAgICAgImUuZGF0ZSA+PSAnJHR0X3N0YXJ0JyAiIC4KICAgICAgICAgICAgICAgICAgICAgICAiQU5EIGUuZGF0ZSA8JyR0dF9lbmQnICIgLgogICAgICAgICAgICAgICAgICAgICAgICJBTkQgYy5tYW5hZ2VyIGluIChTRUxFQ1QgaWQgRlJPTSBkYWNvbnNfdXNlcnMgV0hFUkUgY3VzdG9tZXJfaWQgPSAnIi4kdGhpcy0+c2Vzc2lvbi0+Y3VzdG9tZXJfaWQuIicpICI7CgoKCiAgICAJCQlpZiAoJG1hbmFnZXIgIT0gLTEpIHsKICAgIAkJCQkkc3FsIC49ICJBTkQgYy5tYW5hZ2VyID0gJyRtYW5hZ2VyJyAiOwogICAgCQkJfQoKICAgIAkJCSRzcWwgLj0gIk9SREVSIEJZIGUuZGF0ZSBERVNDIjsKCiAgICAgICAgICAgICAgICAkc3FsMiA9ICJTRUxFQ1QgRElTVElOQ1QgZS5kYXRlIGFzIGBkYXRlYCBGUk9NIGBkYWNvbnNfZXZlbnRzYCBhcyBlICIgLgogICAgICAgICAgICAgICAgICAgICAgICAiTEVGVCBKT0lOIGBkYWNvbnNfY29tcGFuaWVzYCBhcyBjIG9uIGMuaWQgPSBlLmNvbXBhbnlfaWQgV0hFUkUgIiAuCiAgICAgICAgICAgICAgICAgICAgICAgICJjLm1hbmFnZXIgaW4gKFNFTEVDVCBpZCBGUk9NIGRhY29uc191c2VycyBXSEVSRSBjdXN0b21lcl9pZCA9ICciLiR0aGlzLT5zZXNzaW9uLT5jdXN0b21lcl9pZC4iJykgIjsKCiAgICAgICAgICAgICAgICBpZiAoJG1hbmFnZXIgIT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAkc3FsMiAuPSAiQU5EIGMubWFuYWdlciA9ICckbWFuYWdlcicgIjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkdGVtcF9hcnIgPSAkdGhpcy0+ZGItPmZldGNoQWxsKCRzcWwyKTsKICAgICAgICAgICAgICAgICR0ZW1wID0gYXJyYXkgKCk7CiAgICAgICAgICAgICAgICBmb3JlYWNoICgkdGVtcF9hcnIgYXMgJGsgPT4gJGFycikgewogICAgICAgICAgICAgICAgICAgICR0ZW1wWyRrXSA9IGRhdGUoImoubi5ZIixzdHJ0b3RpbWUoJGFyclsnZGF0ZSddKSArICgzNjAwICogJEdNVCkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJHRoaXMtPnZpZXctPmpzb24gPSBaZW5kX0pzb246OmVuY29kZSgkdGVtcCk7CgogICAgCQl9IGVsc2UgewogICAgCQkJJHNxbCA9ICJTRUxFQ1QgZS5uYW1lIGFzIGVuYW1lLCBlLmRhdGUgYXMgYGRhdGVgLCBlLmNvbW1lbnQgYXMgY29tbWVudCwgYy5uYW1lIGFzIGNuYW1lLCBjLmlkIGFzIGlkIEZST00gYGRhY29uc19ldmVudHNgIGFzIGUgIiAuCiAgICAJCQkJICAgIkxFRlQgSk9JTiBgZGFjb25zX2NvbXBhbmllc2AgYXMgYyBvbiBjLmlkID0gZS5jb21wYW55X2lkIFdIRVJFICIgLgogICAgCQkJCSAgICJlLmRhdGUgPj0gJyR0dF9zdGFydCcgIiAuCiAgICAJCQkJICAgIkFORCBlLmRhdGUgPCckdHRfZW5kJyAiIC4KICAgIAkJCQkgICAiQU5EIGMubWFuYWdlciA9ICciLiR0aGlzLT5zZXNzaW9uLT5pZC4iJyAiIC4KICAgIAkJCQkgICAiT1JERVIgQlkgZS5kYXRlIERFU0MiOwoKICAgICAgICAgICAgICAgICRzcWwyID0gIlNFTEVDVCBESVNUSU5DVCBlLmRhdGUgYXMgYGRhdGVgIEZST00gYGRhY29uc19ldmVudHNgIGFzIGUgIiAuCiAgICAgICAgICAgICAgICAgICAgICAgIkxFRlQgSk9JTiBgZGFjb25zX2NvbXBhbmllc2AgYXMgYyBvbiBjLmlkID0gZS5jb21wYW55X2lkIFdIRVJFICIgLgogICAgICAgICAgICAgICAgICAgICAgICJjLm1hbmFnZXIgPSAnIi4kdGhpcy0+c2Vzc2lvbi0+aWQuIicgIjsKCgkJCQkvKgogICAgICAgICAgICAgICAgJHRlbXAgPSAkdGhpcy0+ZGItPmZldGNoQ29sKCRzcWwyKTsKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCR0ZW1wIGFzICRrID0+ICR2KSB7CiAgICAgICAgICAgICAgICAgICAgJHRlbXBbJGtdID0gZGF0ZSgiai5uLlkiLHN0cnRvdGltZSgkdGVtcFska10pICsgKDM2MDAgKiAkR01UKSk7CiAgICAgICAgICAgICAgICB9CgkJCQkqLwogICAgCQkJJHRlbXBfYXJyID0gJHRoaXMtPmRiLT5mZXRjaEFsbCgkc3FsMik7CiAgICAgICAgICAgICAgICAkdGVtcCA9IGFycmF5ICgpOwogICAgICAgICAgICAgICAgZm9yZWFjaCAoJHRlbXBfYXJyIGFzICRrID0+ICRhcnIpIHsKICAgICAgICAgICAgICAgICAgICAkdGVtcFska10gPSBkYXRlKCJqLm4uWSIsc3RydG90aW1lKCRhcnJbJ2RhdGUnXSkgKyAoMzYwMCAqICRHTVQpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICR0aGlzLT52aWV3LT5qc29uID0gWmVuZF9Kc29uOjplbmNvZGUoJHRlbXApOwoKICAgIAkJfQoKCiAgICAJfSBlbHNlIGlmICgkc2NhbGUgPT0gMikgewoKICAgIAkJJGN1cnJlbnR3ZWVrID0gJHRoaXMtPmdldFN0YXJ0QW5kRW5kT2ZXZWVrKCRmb3JkYXRlWyJkIl0sICgkZm9yZGF0ZVsibSJdKzEpLCAkZm9yZGF0ZVsieSJdKTsKCiAgICAgICAgICAgIGlmICgkR01UICE9IDApIHsKICAgICAgICAgICAgICAgICRmaXggPSBzdHJ0b3RpbWUoJGN1cnJlbnR3ZWVrWydzdGFydCddWyd5J10uIi0iLiRjdXJyZW50d2Vla1snc3RhcnQnXVsnbSddLiItIi4kY3VycmVudHdlZWtbJ3N0YXJ0J11bJ2QnXS4iIDAwOjAwOjAwIikgLSAoMzYwMCAqICRHTVQpOwogICAgICAgICAgICAgICAgJGZpeDIgPSBzdHJ0b3RpbWUoJGN1cnJlbnR3ZWVrWydlbmQnXVsneSddLiItIi4kY3VycmVudHdlZWtbJ2VuZCddWydtJ10uIi0iLiRjdXJyZW50d2Vla1snZW5kJ11bJ2QnXS4iIDIzOjU5OjU5IikgLSAoMzYwMCAqICRHTVQpOwogICAgICAgICAgICAgICAgJHR0X3N0YXJ0ID0gZGF0ZSgiWS1tLWQgIiwkZml4KS5kYXRlKCJIIiwkZml4KS4iOiIuZGF0ZSgiaSIsJGZpeCkuIjoiLmRhdGUoInMiLCRmaXgpOwogICAgICAgICAgICAgICAgJHR0X2VuZCA9IGRhdGUoIlktbS1kICIsJGZpeDIpLmRhdGUoIkgiLCRmaXgyKS4iOiIuZGF0ZSgiaSIsJGZpeDIpLiI6Ii5kYXRlKCJzIiwkZml4Mik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkdHRfc3RhcnQgPSBkYXRlKCJZLW0tZCBIOmk6cyIsc3RydG90aW1lKCRjdXJyZW50d2Vla1snc3RhcnQnXVsneSddLiItIi4kY3VycmVudHdlZWtbJ3N0YXJ0J11bJ20nXS4iLSIuJGN1cnJlbnR3ZWVrWydzdGFydCddWydkJ10uIiAwMDowMDowMCIpKTsKICAgICAgICAgICAgICAgICR0dF9lbmQgPSBkYXRlKCJZLW0tZCBIOmk6cyIsc3RydG90aW1lKCRjdXJyZW50d2Vla1snZW5kJ11bJ3knXS4iLSIuJGN1cnJlbnR3ZWVrWydlbmQnXVsnbSddLiItIi4kY3VycmVudHdlZWtbJ2VuZCddWydkJ10uIiAyMzo1OTo1OSIpKTsKICAgICAgICAgICAgfQoKICAgIAkJaWYgKCR0aGlzLT5zZXNzaW9uLT5pc19zdXBlcl91c2VyID09IDEpIHsKCiAgICAJCQkkc3FsID0gIlNFTEVDVCBlLm5hbWUgYXMgZW5hbWUsdS5uaWNrbmFtZSBhcyBtYW5hZ2VyX25hbWUsIGUuZGF0ZSBhcyBgZGF0ZWAsIGUuY29tbWVudCBhcyBjb21tZW50LCBjLm5hbWUgYXMgY25hbWUsIGMuaWQgYXMgaWQgRlJPTSBgZGFjb25zX2V2ZW50c2AgYXMgZSAiIC4KICAgIAkJCQkgICAiTEVGVCBKT0lOIGBkYWNvbnNfY29tcGFuaWVzYCBhcyBjIG9uIGMuaWQgPSBlLmNvbXBhbnlfaWQgIiAuCiAgICAgICAgICAgICAgICAgICAgICAgIkxFRlQgSk9JTiBgZGFjb25zX3VzZXJzYCBhcyB1IE9OIGMubWFuYWdlciA9IHUuaWQgV0hFUkUgIiAuCiAgICAJCQkJICAgImUuZGF0ZSA+PSAnJHR0X3N0YXJ0JyAiIC4KICAgIAkJCQkgICAiQU5EIGUuZGF0ZSA8JyR0dF9lbmQnICIgLgogICAgCQkJCSAgICJBTkQgYy5tYW5hZ2VyIGluIChTRUxFQ1QgaWQgRlJPTSBkYWNvbnNfdXNlcnMgV0hFUkUgY3VzdG9tZXJfaWQgPSAnIi4kdGhpcy0+c2Vzc2lvbi0+Y3VzdG9tZXJfaWQuIicpICI7CgogICAgCQkJaWYgKCRtYW5hZ2VyICE9IC0xKSB7CiAgICAJCQkJJHNxbCAuPSAiQU5EIGMubWFuYWdlciA9ICckbWFuYWdlcicgIjsKICAgIAkJCX0KCiAgICAJCQkkc3FsIC49ICJPUkRFUiBCWSBlLmRhdGUiOwoKICAgICAgICAgICAgICAgIC8vCiAgICAgICAgICAgICAgICAkc3FsMiA9ICJTRUxFQ1QgRElTVElOQ1QgZS5kYXRlIGFzIGBkYXRlYCBGUk9NIGBkYWNvbnNfZXZlbnRzYCBhcyBlICIgLgogICAgICAgICAgICAgICAgICAgICAgICJMRUZUIEpPSU4gYGRhY29uc19jb21wYW5pZXNgIGFzIGMgb24gYy5pZCA9IGUuY29tcGFueV9pZCBXSEVSRSAiIC4KICAgICAgICAgICAgICAgICAgICAgICAiYy5tYW5hZ2VyIGluIChTRUxFQ1QgaWQgRlJPTSBkYWNvbnNfdXNlcnMgV0hFUkUgY3VzdG9tZXJfaWQgPSAnIi4kdGhpcy0+c2Vzc2lvbi0+Y3VzdG9tZXJfaWQuIicpICI7CgogICAgICAgICAgICAgICAgaWYgKCRtYW5hZ2VyICE9IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgJHNxbDIgLj0gIkFORCBjLm1hbmFnZXIgPSAnJG1hbmFnZXInICI7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJHRlbXAgPSAkdGhpcy0+ZGItPmZldGNoQ29sKCRzcWwyKTsKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCR0ZW1wIGFzICRrID0+ICR2KSB7CiAgICAgICAgICAgICAgICAgICAgJHRlbXBbJGtdID0gZGF0ZSgiai5uLlkiLHN0cnRvdGltZSgkdGVtcFska10pICsgKDM2MDAgKiAkR01UKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkdGhpcy0+dmlldy0+anNvbiA9IFplbmRfSnNvbjo6ZW5jb2RlKCR0ZW1wKTsKCiAgICAJCX0gZWxzZSB7CgogICAgCQkJJHNxbCA9ICJTRUxFQ1QgZS5uYW1lIGFzIGVuYW1lLCBlLmRhdGUgYXMgYGRhdGVgLCBlLmNvbW1lbnQgYXMgY29tbWVudCwgYy5uYW1lIGFzIGNuYW1lLCBjLmlkIGFzIGlkIEZST00gYGRhY29uc19ldmVudHNgIGFzIGUgIiAuCiAgICAJCQkJICAgIkxFRlQgSk9JTiBgZGFjb25zX2NvbXBhbmllc2AgYXMgYyBvbiBjLmlkID0gZS5jb21wYW55X2lkIFdIRVJFICIgLgogICAgCQkJCSAgICJlLmRhdGUgPj0gJyR0dF9zdGFydCcgIiAuCiAgICAJCQkJICAgIkFORCBlLmRhdGUgPCckdHRfZW5kJyAiIC4KICAgIAkJCQkgICAiQU5EIGMubWFuYWdlciA9ICciLiR0aGlzLT5zZXNzaW9uLT5pZC4iJyAiIC4KICAgICAgICAgICAgICAgICAgICAgICAiT1JERVIgQlkgZS5kYXRlIjsKCiAgICAgICAgICAgICAgICAkc3FsMiA9ICJTRUxFQ1QgRElTVElOQ1QgZS5kYXRlIGFzIGBkYXRlYCBGUk9NIGBkYWNvbnNfZXZlbnRzYCBhcyBlICIgLgogICAgICAgICAgICAgICAgICAgICAgICJMRUZUIEpPSU4gYGRhY29uc19jb21wYW5pZXNgIGFzIGMgb24gYy5pZCA9IGUuY29tcGFueV9pZCBXSEVSRSAiIC4KICAgICAgICAgICAgICAgICAgICAgICAiYy5tYW5hZ2VyID0gJyIuJHRoaXMtPnNlc3Npb24tPmlkLiInICI7CgogICAgICAgICAgICAgICAgJHRlbXAgPSAkdGhpcy0+ZGItPmZldGNoQ29sKCRzcWwyKTsKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCR0ZW1wIGFzICRrID0+ICR2KSB7CiAgICAgICAgICAgICAgICAgICAgJHRlbXBbJGtdID0gZGF0ZSgiai5uLlkiLHN0cnRvdGltZSgkdGVtcFska10pICsgKDM2MDAgKiAkR01UKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkdGhpcy0+dmlldy0+anNvbiA9IFplbmRfSnNvbjo6ZW5jb2RlKCR0ZW1wKTsKCiAgICAJCX0KCiAgICAJfSBlbHNlIHsKCiAgICAJCSRkYXlzID0gZGF0ZSAoInQiLCBta3RpbWUgKDAsMCwwLGRhdGUoJGZvcmRhdGVbJ20nXSsxKSwwLGRhdGUoJGZvcmRhdGVbJ3knXSkpKTsKCQkkX2RheXMgPSAkZGF5cyArIDE7CgogICAgICAgICAgICBpZiAoJEdNVCAhPSAwKSB7CiAgICAgICAgICAgICAgICAkZml4ID0gc3RydG90aW1lKCRmb3JkYXRlWyJ5Il0uIi0iLigkZm9yZGF0ZVsibSJdKzEpLiItMDEgMDA6MDA6MDAiKSAtICgzNjAwICogJEdNVCk7CiAgICAgICAgICAgICAgICAkZml4MiA9IHN0cnRvdGltZSgkZm9yZGF0ZVsieSJdLiItIi4oJGZvcmRhdGVbIm0iXSsxKS4iLSRfZGF5cyAyMzo1OTo1OSIpIC0gKDM2MDAgKiAkR01UKTsKICAgICAgICAgICAgICAgICR0dF9zdGFydCA9IGRhdGUoIlktbS1kICIsJGZpeCkuZGF0ZSgiSCIsJGZpeCkuIjoiLmRhdGUoImkiLCRmaXgpLiI6Ii5kYXRlKCJzIiwkZml4KTsKICAgICAgICAgICAgICAgICR0dF9lbmQgPSBkYXRlKCJZLW0tZCAiLCRmaXgyKS5kYXRlKCJIIiwkZml4MikuIjoiLmRhdGUoImkiLCRmaXgyKS4iOiIuZGF0ZSgicyIsJGZpeDIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJHR0X3N0YXJ0ID0gZGF0ZSgiWS1tLWQgSDppOnMiLHN0cnRvdGltZSgkZm9yZGF0ZVsieSJdLiItIi4oJGZvcmRhdGVbIm0iXSsxKS4iLTAxIDAwOjAwOjAwIikpOyAvLy0wMSAwMDowMDowMAogICAgICAgICAgICAgICAgLy8kdHRfZW5kID0gZGF0ZSgiWS1tLWQgSDppOnMiLHN0cnRvdGltZSgkZm9yZGF0ZVsieSJdLiItIi4oJGZvcmRhdGVbIm0iXSsxKS4iLSIuKCRfZGF5cy0xKS4iIDIzOjU5OjU5IikpOwoJCXN3aXRjaCAoJGZvcmRhdGUgWydtJ10rMSkgewoJCQljYXNlIDE6CgkJCWNhc2UgMzoKCQkJY2FzZSA1OgoJCQljYXNlIDc6CgkJCWNhc2UgODoKCQkJY2FzZSAxMDoKCQkJY2FzZSAxMjoKCQkJCSRfX2RheXMgPSAzMTticmVhazsKCQkJY2FzZSAyOiAkX19kYXlzID0gKCRmb3JkYXRlWyd5J10gJSA0ICE9IDApID8gMjggOiAyOTticmVhazsKCQkJZGVmYXVsdDogJF9fZGF5cyA9IDMwOwoJCX0KCQkkdHRfZW5kID0gZGF0ZSgiWS1tLWQgSDppOnMiLHN0cnRvdGltZSgkZm9yZGF0ZVsieSJdLiItIi4oJGZvcmRhdGVbIm0iXSsxKS4iLSIuKCRfX2RheXMpLiIgMjM6NTk6NTkiKSk7CiAgICAgICAgICAgIH0KCiAgICAJCWlmICgkdGhpcy0+c2Vzc2lvbi0+aXNfc3VwZXJfdXNlciA9PSAxKSB7CgogICAgCQkJJHNxbCA9ICJTRUxFQ1QgZS5uYW1lIGFzIGVuYW1lLHUubmlja25hbWUgYXMgbWFuYWdlcl9uYW1lLCBlLmRhdGUgYXMgYGRhdGVgLCBlLmNvbW1lbnQgYXMgY29tbWVudCwgYy5uYW1lIGFzIGNuYW1lLCBjLmlkIGFzIGlkIEZST00gYGRhY29uc19ldmVudHNgIGFzIGUgIiAuCiAgICAJCQkJICAgIkxFRlQgSk9JTiBgZGFjb25zX2NvbXBhbmllc2AgYXMgYyBvbiBjLmlkID0gZS5jb21wYW55X2lkICIgLgogICAgICAgICAgICAgICAgICAgICAgICJMRUZUIEpPSU4gYGRhY29uc191c2Vyc2AgYXMgdSBPTiBjLm1hbmFnZXIgPSB1LmlkIFdIRVJFICIgLgogICAgCQkJCSAgICJlLmRhdGUgPj0gJyR0dF9zdGFydCcgIiAuCiAgICAJCQkJICAgIkFORCBlLmRhdGUgPCckdHRfZW5kJyAiIC4KICAgIAkJCQkgICAiQU5EIGMubWFuYWdlciBpbiAoU0VMRUNUIGlkIEZST00gZGFjb25zX3VzZXJzIFdIRVJFIGN1c3RvbWVyX2lkID0gJyIuJHRoaXMtPnNlc3Npb24tPmN1c3RvbWVyX2lkLiInKSAiOwoKICAgIAkJCWlmICgkbWFuYWdlciAhPSAtMSkgewogICAgCQkJCSRzcWwgLj0gIkFORCBjLm1hbmFnZXIgPSAnJG1hbmFnZXInICI7CiAgICAJCQl9CgogICAgCQkJJHNxbCAuPSAiT1JERVIgQlkgZS5kYXRlIjsKICAgIAkJfSBlbHNlIHsKICAgIAkJCSRzcWwgPSAiU0VMRUNUIGUubmFtZSBhcyBlbmFtZSwgZS5kYXRlIGFzIGBkYXRlYCwgZS5jb21tZW50IGFzIGNvbW1lbnQsIGMubmFtZSBhcyBjbmFtZSwgYy5pZCBhcyBpZCBGUk9NIGBkYWNvbnNfZXZlbnRzYCBhcyBlICIgLgogICAgCQkJCSAgICJMRUZUIEpPSU4gYGRhY29uc19jb21wYW5pZXNgIGFzIGMgb24gYy5pZCA9IGUuY29tcGFueV9pZCBXSEVSRSAiIC4KICAgIAkJCQkgICAiZS5kYXRlID49ICckdHRfc3RhcnQnICIgLgogICAgCQkJCSAgICJBTkQgZS5kYXRlIDwnJHR0X2VuZCcgIiAuCiAgICAJCQkJICAgIkFORCBjLm1hbmFnZXIgPSAnIi4kdGhpcy0+c2Vzc2lvbi0+aWQuIicgIiAuCiAgICAgICAgICAgICAgICAgICAgICAgIk9SREVSIEJZIGUuZGF0ZSI7CiAgICAJCX0KCiAgICAJfQogICAgCSR0ZW1wID0gJHRoaXMtPmRiLT5mZXRjaEFsbCgkc3FsKTsKCiAgICAgICAgaWYgKCR0aGlzLT5zZXNzaW9uLT5pc19zdXBlcl91c2VyID09IDEpIHsKICAgICAgICAkc3FsX2NvdW50ID0gIlNFTEVDVCBjb3VudCgqKSBhcyBjbnQsIGMubWFuYWdlciBGUk9NIGBkYWNvbnNfZXZlbnRzYCBhcyBlICIgLgogICAgICAgICAgICAgICAgICAgICAiTEVGVCBKT0lOIGBkYWNvbnNfY29tcGFuaWVzYCBhcyBjIG9uIGMuaWQgPSBlLmNvbXBhbnlfaWQgIiAuCiAgICAgICAgICAgICAgICAgICAgICJMRUZUIEpPSU4gYGRhY29uc191c2Vyc2AgYXMgdSBPTiBjLm1hbmFnZXIgPSB1LmlkIFdIRVJFICIgLgogICAgICAgICAgICAgICAgICAgICAiZS5kYXRlID49ICckdHRfc3RhcnQnICIgLgogICAgICAgICAgICAgICAgICAgICAiQU5EIGUuZGF0ZSA8JyR0dF9lbmQnICIgLgogICAgICAgICAgICAgICAgICAgICAiQU5EIGMubWFuYWdlciBpbiAoU0VMRUNUIGlkIEZST00gZGFjb25zX3VzZXJzIFdIRVJFIGN1c3RvbWVyX2lkID0gJyIuJHRoaXMtPnNlc3Npb24tPmN1c3RvbWVyX2lkLiInKSAiIC4KICAgICAgICAgICAgICAgICAgICAgIkdST1VQIEJZIGMubWFuYWdlciI7CgogICAgICAgICR0aGlzLT5ldmVudENvdW50QnlNYW5hZ2VycygkdGhpcy0+ZGItPmZldGNoQWxsKCRzcWxfY291bnQpKTsKICAgICAgICB9CgogICAgICAgIGlmICgkR01UICE9IDApIHsKICAgICAgICAgICAgZm9yZWFjaCAoJHRlbXAgYXMgJGsgPT4gJHYpIHsKICAgICAgICAgICAgICAgICR0ZW1wWyRrXVsnZGF0ZSddID0gZGF0ZSgiWS1tLWQgSDppOnMiLHN0cnRvdGltZSgkdGVtcFska11bJ2RhdGUnXSkgKyAoMzYwMCAqICRHTVQpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAkdGhpcy0+dmlldy0+am91cm5hbGRhdGEgPSAkdGVtcDsKICAgICAgICA='));

    }

    private function eventCountByManagers($data) {
        $temp = $this->view->managers;
        foreach ($temp as $k => $v) {

            foreach ($data as $k2 => $v2) {
                if ($v2['manager']==$v['id']) {
                    $temp[$k]['cnt'] = $v2['cnt'];
                }
            }

        }
        $this->view->managers = $temp;
    }

}

?>