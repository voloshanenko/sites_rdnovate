<?php
/**
 * @version     $Id$ 1.0.10 0
 * @package     Joomla
 * @copyright   Copyright (C) 2005 - 2008 Open Source Matters. All rights reserved.
 * @license     GNU/GPL, see LICENSE.php
 *
 * added/fixed in version 1.0.1
 *
 * - fixed the bug with SOBI2 SEF
 * - trimmed the text results so they are better fitting into the search results description
 * - added German language
 *
 * added/fixed in version 1.0.2
 *
 * - fixed the bug with SOBI2 SEF categories
 * - fixed the bug with languages in frontend
 * - added parameters to activate / deactivate search in categories or items
 * - added a parameter to search only the fields displayed in vcard or details
 *
 * added/fixed in version 1.0.3
 *
 * - added the initialization of sobi2 environment to get the same urls
 * - this can be deactivated from the parameters
 *
 * added/fixed in version 1.0.4
 *
 * - modified the date format from Y-m-d to Y-m-d H:i:s
 *
 * added/fixed in version 1.0.5
 *
 * - support for SOBI2 clones
 *
 * added/fixed in version 1.0.6
 *
 * - fixed SEF on cloned SOBI urls
 *
 * added/fixed in version 1.0.7
 *
 * - added a parameter to activate the search in the SOBI2 category descriptions
 * - added parameters to set the order and direction in which to display the categories resulted from the search
 * - added parameters to set the order and direction in which to display the items resulted from the search
 *
 * added/fixed in version 1.0.8
 *
 * - the search is don in meta description and meta keywords as well
 *
 * added/fixed in version 1.0.9
 *
 * - fixed the coding of the language files
 *
 * added/fixed in version 1.0.10
 *
 * - replaced ItemId with Itemid in the urls generated by aiSobiSearch
 *
 */

// no direct access

( defined( '_VALID_MOS' ) || defined( '_JEXEC' ) ) || ( trigger_error('Restricted access', E_USER_ERROR) && exit() );

$mainframe->registerEvent( 'onSearch', 'plgAiSobiSearch' );
$mainframe->registerEvent( 'onSearchAreas', 'plgAiSobiSearchAreas' );

function &plgAiSobiSearchAreas() {

	$lang =& JFactory::getLanguage();
	$lang->load( 'plg_search_aisobisearch' , JPATH_ADMINISTRATOR );

	// load plugin params info
 	$plugin =& JPluginHelper::getPlugin('search', 'aisobisearch');
 	$pluginParams = new JParameter( $plugin->params );
	// read the clones
	$sobi2_clones = strtolower(trim($pluginParams->def( 'sobi2_clones', 'sobi2' )));
	if ( strlen($sobi2_clones) == 0 ) {
		// if clones are not defined, use the default value sobi2 and record the fact the the clones are not used
		$use_sobi_clones = false;
		$sobi2_clones = array( 'sobi2' );
	} else {
		// if clones are defined, generate the array containing them
		$use_sobi_clones = true;
		$sobi2_clones = explode(',',$sobi2_clones);
	}
	// make sure the clone names are correct
	foreach($sobi2_clones as $key=>$clone) {
		$sobi2_clones[$key] = trim($sobi2_clones[$key]);
	}

	static $areas = array();
	foreach($sobi2_clones as $clone) {
		$sobiName = getSobiComponentName( $clone );

		if ( $pluginParams->def( 'search_items', 1 ) ) {
			$areas['ai'.$clone.'Fields'] = $sobiName.' - '.JText::_( 'Entries' );
		}
		if ( $pluginParams->def( 'search_categories', 1 ) ) {
			$areas['ai'.$clone.'Categories'] = $sobiName.' - '.JText::_( 'Categories' );
		}
	}

	return $areas;
}

function plgAiSobiSearch( $text, $phrase='', $ordering='', $areas=null ) {
	$db =& JFactory::getDBO();
	$user =& JFactory::getUser();

	$searchText = trim($text);

	// if no search string is specified return empty result
	if ($searchText == '') {
		return array();
	}
	$searchText	= $db->getEscaped( $searchText, true );

	// if an area is specified and it is not one of this plugin return empty result
	if (is_array($areas)) {
		$areas = array_intersect( $areas, array_keys( plgAiSobiSearchAreas() ));
	} else {
		$areas = array_keys( plgAiSobiSearchAreas() );
	}

	// load plugin params info
 	$plugin =& JPluginHelper::getPlugin('search', 'aisobisearch');
 	$pluginParams = new JParameter( $plugin->params );
	// read the clones
	$sobi2_clones = strtolower(trim($pluginParams->def( 'sobi2_clones', 'sobi2' )));
	if ( strlen($sobi2_clones) == 0 ) {
		// if clones are not defined, use the default value sobi2 and record the fact the the clones are not used
		$use_sobi_clones = false;
		$sobi2_clones = array( 'sobi2' );
	} else {
		// if clones are defined, generate the array containing them
		$use_sobi_clones = true;
		$sobi2_clones = explode(',',$sobi2_clones);
	}
	// make sure the clone names are correct
	foreach($sobi2_clones as $key=>$clone) {
		$sobi2_clones[$key] = trim($sobi2_clones[$key]);
	}

	$limit = $pluginParams->def( 'search_limit', 50 );
	$search_fields = $pluginParams->def( 'search_fields', 0 );
	$search_categories_description = $pluginParams->def( 'search_categories_description', 1 );
	$order_categories = $pluginParams->def( 'order_categories', 1 );
	$order_categories_direction = $pluginParams->def( 'order_categories_direction', 'ASC' );
	$order_items = $pluginParams->def( 'order_items', 0 );
	$order_items_direction = $pluginParams->def( 'order_items_direction', 'ASC' );

	$return = array();

	foreach($sobi2_clones as $clone) {
		$sobiName = getSobiComponentName( $clone );
		$sobiItemId = getSobiItemId( $clone );

		defined( '_'.strtoupper($clone).'_' )  	|| define( '_'.strtoupper($clone).'_', true );
		defined( '_'.strtoupper($clone).'_OPT' ) || define( '_'.strtoupper($clone).'_OPT', 'com_'.$clone );
	
		$orderCat = '';
		$orderFld = '';
		switch ( $ordering ) {
			case 'alpha':
				// Alphabetical
				$orderCat = 'name';
				break;
	
			case 'category':
				// Section/Category
				$orderCat = 'name';
			case 'popular':
				// Most Popular
			case 'newest':
				// Newest First
			case 'oldest':
				// Oldest First
			default:
				$orderCat = 'name';
		}
	
		foreach($areas as $area) {
			switch( $area ) {
				case 'ai'.$clone.'Categories' :
					switch( $phrase ) {
						case 'exact' :
							if ( $search_categories_description ) {
								$where = 'LOWER(name) LIKE '.$db->Quote( '%'.$searchText.'%', false ) . ' OR LOWER(description) LIKE '.$db->Quote( '%'.$searchText.'%', false );
							} else {
								$where = 'LOWER(name) LIKE '.$db->Quote( '%'.$searchText.'%', false );
							}
							break;
						case 'all' :
						case 'any' :
						default :
							$words = explode( ' ', $searchText );
							$wheres = array();
							foreach ($words as $word) {
								$word = $db->Quote( '%'.$db->getEscaped( $word, true ).'%', false );
								$wheres2 = array();
								if ( $search_categories_description ) {
									$wheres2[] = '( LOWER(name) LIKE '.$word.' OR LOWER(description) LIKE '.$word.' )';
								} else {
									$wheres2[] = 'LOWER(name) LIKE '.$word;
								}
								$wheres[] = implode( ' OR ', $wheres2 );
							}
							$where = '(' . implode( ($phrase == 'all' ? ') AND (' : ') OR ('), $wheres ) . ')';
							break;
					}
					$query	= 'SELECT \''.$clone.'\' as sobi_clone, name AS title, '.
									  'CONCAT(name,\' \',description) AS text, '.
									  '\'\' AS created, '.
									  '\''.$sobiName.'\' AS section, '.
									  'CONCAT(\'index.php?option=com_'.$clone.'&amp;catid=\',catid'.($sobiItemId>0?',\'&amp;Itemid=\','.$sobiItemId:'').') AS href, '.
									  '\'0\' AS browsernav, catid, 0 as itemid '.
									  'FROM #__'.$clone.'_categories WHERE ( '.$where.' ) and published = 1';
					switch($order_categories) {
						case 1 :
							$query .= ' ORDER BY ordering '.$order_categories_direction;
							break;
						case 2 :
							$query .= ' ORDER BY name '.$order_categories_direction;
							break;
					}

					$db->setQuery( $query, 0, $limit );
					$rows = $db->loadObjectList();
					$return = array_merge($return, $rows);
	
					break;
				case 'ai'.$clone.'Fields' :
					switch( $phrase ) {
						case 'exact' :
							$where_1 = ' ( LOWER(i.title) LIKE '.$db->Quote( '%'.$searchText.'%', false ).' OR LOWER(i.metakey) LIKE '.$db->Quote( '%'.$searchText.'%', false ).' OR LOWER(i.metadesc) LIKE '.$db->Quote( '%'.$searchText.'%', false ).' )';
							$where_2 = ' LOWER(fd.data_txt) LIKE '.$db->Quote( '%'.$searchText.'%', false );
							$where_3 = ' LOWER(l.langKey) LIKE '.$db->Quote( '%'.$searchText.'%', false );
							break;
						case 'all' :
						case 'any' :
						default :
							$words = explode( ' ', $searchText );
							$wheres_1 = array();
							$wheres_2 = array();
							$wheres_3 = array();
							foreach ($words as $word) {
								$word = $db->Quote( '%'.$db->getEscaped( $word, true ).'%', false );
								$wheres2_1 = array();
								$wheres2_2 = array();
								$wheres2_3 = array();
								$wheres2_1[] = ' ( LOWER(i.title) LIKE '.$word.' OR LOWER(i.metakey) LIKE '.$word.' OR LOWER(i.metadesc) LIKE '.$word.' ) ';
								$wheres2_2[] = 'LOWER(fd.data_txt) LIKE '.$word;
								$wheres2_3[] = 'LOWER(l.langKey) LIKE '.$word;
								$wheres_1[] = implode( ' OR ', $wheres2_1 );
								$wheres_2[] = implode( ' OR ', $wheres2_2 );
								$wheres_3[] = implode( ' OR ', $wheres2_3 );
							}
							$where_1 = '(' . implode( ($phrase == 'all' ? ') AND (' : ') OR ('), $wheres_1 ) . ')';
							$where_2 = '(' . implode( ($phrase == 'all' ? ') AND (' : ') OR ('), $wheres_2 ) . ')';
							$where_3 = '(' . implode( ($phrase == 'all' ? ') AND (' : ') OR ('), $wheres_3 ) . ')';
							break;
					}
					$mainframe = JFactory::getApplication();
					$now = date( 'Y-m-d H:i:s', time() + $mainframe->getCfg('offset') * 60 * 60  );
					$where_item = 'i.published = 1 and i.approved = 1 and i.publish_up <= \''.$now.'\' and ( i.publish_down = \'0000-00-00 00:00:00\' or i.publish_down >= \''.$now.'\' )';
					switch($search_fields) {
						case 0:
							$where_fields = 'f.enabled = 1';
							break;
						case 1:
							$where_fields = 'f.enabled = 1 and ( f.in_vcard = 1 or f.in_details = 1 )';
							break;
						case 2:
							$where_fields = 'f.enabled = 1 and ( f.in_search = 1 or f.in_search = 2 )';
							break;
					}
					$query	= 'SELECT \''.$clone.'\' as sobi_clone, i.title, '.
									 'u2.text, '.
									  '\'\' AS created, '.
									  '\''.$sobiName.'\' AS section, '.
									  'CONCAT(\'index.php?option=com_'.$clone.'&amp;'.$clone.'Task='.$clone.'Details&amp;'.$clone.'Id=\',u2.itemid'.($sobiItemId>0?',\'&amp;Itemid=\','.$sobiItemId:'').') AS href, '.
									  '\'0\' AS browsernav, 0 as catid, u2.itemid '.
									 'from ( '.
									  'select u.itemid, group_concat(TRIM(u.text) SEPARATOR \' \') as text from ( '.
											  'select i.itemid, rpad(i.title,200,\' \') as text from #__'.$clone.'_item i where ( ' . $where_item . ' ) and ( '.$where_1.' ) '.
											  'union '.
											  'select fd.itemid, rpad(fd.data_txt,200,\' \') as text from #__'.$clone.'_fields_data fd '.
																									'left join #__'.$clone.'_fields f on fd.fieldid = f.fieldid '.
																									'left join #__'.$clone.'_item i on fd.itemid = i.itemid '.
																									'where ( f.fieldType = 1 or f.fieldType = 2 ) and ( ' . $where_fields . ' ) and ( ' . $where_item . ' ) and ( '.$where_2.' ) '.
											  'union '.
											  'select fd.itemid, rpad(l.langValue,200,\' \') as text from #__'.$clone.'_fields_data fd '.
																									'left join #__'.$clone.'_language l on fd.data_txt = l.langKey '.
																									'left join #__'.$clone.'_fields f on fd.fieldid = f.fieldid '.
																									'left join #__'.$clone.'_item i on fd.itemid = i.itemid '.
																									'where ( f.fieldType = 3 or f.fieldType = 5 or f.fieldType = 6 ) and ( ' . $where_fields . ' ) and ( ' . $where_item . ' ) and ( '.$where_3.' ) '.
												') u group by u.itemid ) u2 '.
												'left join #__'.$clone.'_item i on u2.itemid = i.itemid';
					switch( $order_items ) {
						case -1 :
							$query .= ' ORDER BY i.title '.$order_items_direction;
							break;
						case 0 :
							$query .= ' ORDER BY i.ordering '.$order_items_direction;
							break;
						default :
							$query .= ' LEFT JOIN #__'.$clone.'_fields_data fd_o on u2.itemid = fd_o.itemid and fd_o.fieldid = '.$order_items.' ORDER BY fd_o.data_txt '.$order_items_direction;
							break;
					}

					$db->setQuery( $query, 0, $limit );
					$rows = $db->loadObjectList();
	
					$return = array_merge($return, $rows);
	
					break;
			}
		}
	
		$activate_sobi_sef = $pluginParams->def( 'activate_sobi_sef', 0 );
	
		$app =& JFactory::getApplication();
		if ( $app->getCfg('sef') ) {
			if ( $activate_sobi_sef ) {
				$timeStart = microtime(true);
				if( function_exists( 'memory_get_usage' ) ) {
					$memStart = memory_get_usage();
				}
				else {
					$memStart = 0;
				}
			
				$com_sobi2_path = JPATH_ROOT.DS.'components'.DS.'com_'.$clone;
			
				defined('_'.($use_sobi_clones?strtoupper($clone):'SOBI').'_FE_PATH') ||  define('_'.($use_sobi_clones?strtoupper($clone):'SOBI').'_FE_PATH', $com_sobi2_path );
				
			/*
			 *  Get some common variables from the $_REQUEST global
			 */
				defined( "_".($use_sobi_clones?strtoupper($clone):'SOBI')."_CMSROOT" ) 	||  define( "_".($use_sobi_clones?strtoupper($clone):'SOBI')."_CMSROOT", str_replace( DS."components".DS.constant('_'.strtoupper($clone).'_OPT'), null, constant('_'.($use_sobi_clones?strtoupper($clone):'SOBI').'_FE_PATH') ) );
				if( !file_exists( constant('_'.($use_sobi_clones?strtoupper($clone):'SOBI').'_CMSROOT').DS.'includes'.DS.'joomla.php' ) ) {
					define( '_'.($use_sobi_clones?strtoupper($clone):'SOBI').'_MAMBO', true );
				}
				require_once( constant('_'.($use_sobi_clones?strtoupper($clone):'SOBI').'_FE_PATH').DS.'config.class.php' );
				eval('$config = & '.$clone.'Config::getInstance();');
			
				$config->memStart = $memStart;
				$config->timeStart = $timeStart;
			
				eval( '$sobi2Task 	= '.$clone.'Config::request( $_REQUEST, \''.$clone.'Task\', null );');
				eval( '$catid = intval( '.$clone.'Config::request($_REQUEST, \'catid\', 0 ) );');
				eval( '$letter = '.$clone.'Config::request( $_REQUEST, "letter", null );');
				eval( '$tag = '.$clone.'Config::request( $_REQUEST, "tag", null);');
				$task 		= $sobi2Task ? $sobi2Task : ( $letter ? "alphaListing" : ( $tag ? "tagListing" : "category_{$catid}" ) ) ;
				$doCache 	= false;
				$IgnoreTaskCache = $config->key( "general", "cache_ignore_task" );
				if( strlen( $IgnoreTaskCache ) ) {
					$IgnoreTaskCache = explode( ",",$IgnoreTaskCache );
				}
				else {
					$IgnoreTaskCache = array();
				}
				$request = array();
				if( $config->cacheL2Enabled && !in_array( $task, $IgnoreTaskCache ) ) {
					if( !parseParams( $request, $clone, $use_sobi_clones ) ) {
						$config->cacheL2Enabled = false;
					}
				}
				else {
					$config->cacheL2Enabled = false;
				}
				$config->set_( "requestParams", $request );
			
				eval($clone.'Config::import("'.$clone.'.html");');
				if ( !class_exists('frontend') ) {
					eval($clone.'Config::import("frontend.class");');
				}
				eval($clone.'Config::import("includes|tab.class");');
				eval($clone.'Config::import("includes|html");');
			
				eval('$id = intval('.$clone.'Config::request($_REQUEST, \'id\', 0));');
				eval('$Itemid = intval('.$clone.'Config::request($_REQUEST, \'Itemid\', 0));');
				eval('$sobi2Id = intval('.$clone.'Config::request($_REQUEST, \''.$clone.'Id\', 0));');
				$mainframe =& $config->getMainframe();
				$catid = $catid == 1 ? 0 : $catid;
				$_REQUEST["catid"] = $catid;
			
			/*
			 * build configuration
			 */
				$my =& $config->getUser();
				$mainframe =& $config->getMainframe();
			
				$cloneLanguage = $clone.'Language';
				if (!file_exists( constant('_'.($use_sobi_clones?strtoupper($clone):'SOBI').'_FE_PATH').DS.'languages'.DS.$config->$cloneLanguage.'.php' ) ) {
					$config->$cloneLanguage = 'english';
				}
				if ( file_exists( constant('_'.($use_sobi_clones?strtoupper($clone):'SOBI').'_FE_PATH').DS.'languages'.DS.$config->$cloneLanguage.'.php' ) ) {
					require_once( constant('_'.($use_sobi_clones?strtoupper($clone):'SOBI').'_FE_PATH').DS.'languages'.DS.$config->$cloneLanguage.'.php' );
				}
				if ( file_exists( constant('_'.($use_sobi_clones?strtoupper($clone):'SOBI').'_FE_PATH').DS.'languages'.DS.'default.php' ) ) {
					include_once( constant('_'.($use_sobi_clones?strtoupper($clone):'SOBI').'_FE_PATH').DS.'languages'.DS.'default.php' );
				}
			
			/*
			 *  get plugins
			 */
				clonePlugins( $clone, $use_sobi_clones );
				if(! empty( $config->S2_plugins ) ) {
					foreach ( $config->S2_plugins as $plugin ) {
						if( method_exists($plugin,"onSobiStart") ) {
							$plugin->onSobiStart( $sobi2Task );
						}
					}
				}
				$params =& $config->get_( 'params' );
				/* get new frontend interface */
				$sobi2Frontend =  new frontend( $catid, $params, $sobi2Task );
				$config->setFrontend( $sobi2Frontend );
			
				$count_results = count($return);
				for($i=0;$i<$count_results;$i++) {
					if ( $return[$i]->sobi_clone == $clone) {
						if ($return[$i]->itemid > 0) {
							$href = "index.php?option=com_{$clone}&amp;{$clone}Task={$clone}Details&amp;{$clone}Id={$return[$i]->itemid}&amp;Itemid={$config->sobi2Itemid}";
						} else {
							$href = "index.php?option=com_{$clone}&amp;catid={$return[$i]->catid}&amp;Itemid={$config->sobi2Itemid}";
						}
						$return[$i]->href = $config->sef($href);
					}
				}
			} else {
				$JConfig = new JConfig();
				if ($JConfig) {
					class_exists( $clone.'Config' ) || require_once( JPATH_ROOT.DS.'components'.DS.'com_'.$clone.DS.'config.class.php' );
				
					$count_results = count($return);
					for($i=0;$i<$count_results;$i++) {
						if ( $return[$i]->sobi_clone == $clone) {
							if ($return[$i]->itemid > 0) {
								$url = "index.php?option=com_{$clone}&amp;{$clone}Task={$clone}Details&amp;{$clone}Id={$return[$i]->itemid}&amp;Itemid={$sobiItemId}";
							} else {
								$url = "index.php?option=com_{$clone}&amp;Itemid={$sobiItemId}&amp;catid={$return[$i]->catid}";
							}
							eval('$return[$i]->href = '.$clone.'Config::sef($url);');
						}
					}
				}
			}
		}
	}
	return $return;
}

function getSobiComponentName( $clone ) {
	$db =& JFactory::getDBO();
	$query	= 'SELECT configValue FROM #__'.$clone.'_config WHERE configKey = \'componentName\'';
	$db->setQuery( $query );
	$componentName = $db->loadResult();
	if (!$componentName) {
		$componentName = strtoupper($clone);
	}
	return $componentName;
}

function getSobiItemId( $clone ) {
	$db =& JFactory::getDBO();
	$query	= 'SELECT id, link FROM #__menu WHERE published = 1 AND LOWER(link) LIKE \'%option=com_'.$clone.'%\' ORDER BY link';
	$db->setQuery( $query );
	$sobiItemId = (int)$db->loadResult();
	return $sobiItemId;
}

/* function from SOBI */

	function parseParams( &$request, $clone, $use_sobi_clones )
	{
		if(!strstr( $_SERVER['REQUEST_URI'], 'index.php') && class_exists( 'JSite')) {
			$router =& JSite::getRouter();
			$uri = clone(JURI::getInstance());
			$req = $router->parse($uri);
			$_SERVER['REQUEST_URI'] = '/index.php?';
			foreach ( $req as $k => $v ) {
				$_SERVER['REQUEST_URI'] .= $k.'='.$v.'&';
			}

		}
		$req = str_replace( array( "/index.php?option=com_".$clone."&" ), null, $_SERVER['REQUEST_URI'] );
		$req = explode( "&", $req );
		eval('$config =& '.$clone.'Config::getInstance();');
		if( $config->key("general", "cachel2_ignore_ie6", true ) ) {
			if( isset( $_SERVER['HTTP_USER_AGENT'] ) && ( eregi( "msie",$_SERVER['HTTP_USER_AGENT'] ) && !eregi( "opera",$_SERVER['HTTP_USER_AGENT'] ) ) ) {
				$v = explode(" ",stristr($_SERVER['HTTP_USER_AGENT'],"msie"));
	            $browser = isset( $v[0] ) ? $v[0] : null;
	            $version = isset( $v[1] ) ? $v[1] : 0;
				if(strtoupper($browser) == "MSIE") {
					$version = ereg_replace( "[^0-9]", "", $version );
					if($version <= 60) {
						return false;
					}
				}
			}
		}
		$IgnoreParamsCache = $config->key( "general", "cache_ignore_params", "fl");
		if( strlen( $IgnoreParamsCache ) ) {
			$IgnoreParamsCache = explode(",",$IgnoreParamsCache);
		}
		else {
			$IgnoreParamsCache = array();
		}
		if( is_array( $req )  && !empty( $req ) ) {
			foreach ( $req as $param ) {
				$param = explode( "=", $param );
				if( isset( $param[0] ) && isset( $param[1] )  &&  ( $param[0] && $param[1] ) )  {
					if( in_array( $param[0], $IgnoreParamsCache ) ) {
						$config->cacheL2Enabled = false;
						return false;
					}
					$request[$param[0]] = $param[1];
				}
			}
		}
		return true;
	}

    /**
     * this function getting all published plugins
     */
    function clonePlugins( $clone, $use_sobi_clones )
    {
    	eval('$config =& '.$clone.'Config::getInstance();');
    	$db =& $config->getDb();
    	$query = "SELECT `init_file`, `name_id` FROM `#__'.$clone.'_plugins` WHERE `enabled` = 1 ORDER BY `position` ASC";
    	$db->setQuery( $query );
    	$plugins = $db->loadObjectList();
    	if( count( $plugins ) ) {
    		foreach( $plugins as $plugin ) {
    			if ( $plugin->init_file && file_exists( constant('_'.($use_sobi_clones?strtoupper($clone):'SOBI').'_FE_PATH').DS."plugins".DS.$plugin->name_id.DS.$plugin->init_file ) ) {
    				include_once( constant('_'.($use_sobi_clones?strtoupper($clone):'SOBI').'_FE_PATH').DS."plugins".DS.$plugin->name_id.DS.$plugin->init_file );
    			}
    		}
    	}
    }
